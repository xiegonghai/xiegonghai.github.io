<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiegonghai&#39;s Blog</title>
  <subtitle>梦想还是要有的</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-11T01:06:27.603Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xiegonghai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux I/O复用之-select epoll</title>
    <link href="http://yoursite.com/2016/07/23/IO%E5%A4%8D%E7%94%A8%E4%B9%8B-Select%20poll%20%E5%92%8Cepoll/"/>
    <id>http://yoursite.com/2016/07/23/IO复用之-Select poll 和epoll/</id>
    <published>2016-07-22T17:01:59.000Z</published>
    <updated>2016-08-11T01:06:27.603Z</updated>
    
    <content type="html">&lt;h2 id=&quot;I-O复用应用场景&quot;&gt;&lt;a href=&quot;#I-O复用应用场景&quot; class=&quot;headerlink&quot; title=&quot;I/O复用应用场景&quot;&gt;&lt;/a&gt;I/O复用应用场景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当客户同时处理多个描述符(交互式输入和网络套接字)&lt;br&gt;TCP服务器同时处理监听套接字和已连接套接字&lt;br&gt;既要处理TCP又要处理UDP&lt;br&gt;处理多个服务或者多个协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;五种I-O模型&quot;&gt;&lt;a href=&quot;#五种I-O模型&quot; class=&quot;headerlink&quot; title=&quot;五种I/O模型&quot;&gt;&lt;/a&gt;五种I/O模型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;阻塞式I/O&lt;/strong&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;img/io1.jpg&quot; alt=&quot;CSDN图标&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;阻塞式I/O&lt;/strong&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;img/io2.jpg&quot; alt=&quot;CSDN图标&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;strong&gt;I/O复用&lt;/strong&gt;&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;img/io3.jpg&quot; alt=&quot;CSDN图标&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;strong&gt;信号驱动式I/O&lt;/strong&gt;&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;img/io4.jpg&quot; alt=&quot;CSDN图标&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;strong&gt;异步I/O&lt;/strong&gt;&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;img/io5.jpg&quot; alt=&quot;CSDN图标&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h3 id=&quot;五种I-O模型总结&quot;&gt;&lt;a href=&quot;#五种I-O模型总结&quot; class=&quot;headerlink&quot; title=&quot;五种I/O模型总结&quot;&gt;&lt;/a&gt;五种I/O模型总结&lt;/h3&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;img/io-summary.jpg&quot; alt=&quot;CSDN图标&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h2 id=&quot;Select&quot;&gt;&lt;a href=&quot;#Select&quot; class=&quot;headerlink&quot; title=&quot;Select&quot;&gt;&lt;/a&gt;Select&lt;/h2&gt;&lt;p&gt;select的第一个参数为fdset集合中最大描述符值加1，select对应于内核中的sys_select调用，sys_select首先将第二三四个参数指向的fd_set拷贝到内核，然后对每个被SET的描述符进行poll，并记录在临时结果中(fdset)，如果有事件发生，select会将临时结果写到用户空间并返回，当轮询一遍后没有任何事件发生，如果指定了超时时间，则select会睡眠到超时，睡眠结束后再进行下一次轮询，并将临时结果写到用户空间，然后返回。select返回后，需要逐一检查关注的描述符是否被SET（事件是否发生）&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval* timeout)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;参数                  描述&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nfds             sets的文件描述符的最大值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;readfds          fd_set type 类型，只读的描述符集 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;writefds         fd_set type 类型，只写的描述符集 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;errorfds         fd_set type 类型，错误的描述符集 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;timeout          超时等待时间&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改fd_set类型的参数，用到以下操作&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fd_set&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    u_int fd_count;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd_array[FD_SETSIZE];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//fd_array可SIZE*8个socket&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FD_ISSET&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd,fd_set *fdset)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回值：若fd在描述符集中则返回非0值，否则返回0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FD_CLR&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd,fd_set *fdset)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//fd指描述符&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FD_SET&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd,fd_set *fdset)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FD_ZERO&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(fd_set *fdset)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;整体运行过程&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sock;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;FILE *fp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fd_set fds;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval timeout=&amp;#123;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;//select等待3秒，3秒轮询，要非阻塞就置0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buffer[&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;]=&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;//256字节的接收缓冲区&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//假定已经建立UDP连接，具体过程不写，简单，当然TCP也同理，主机ip和port都已经给定，要写的文件已经打开&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sock=socket(...);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bind(...);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fp=fopen(...);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    FD_ZERO(&amp;amp;amp;fds); &lt;span class=&quot;comment&quot;&gt;//每次循环都要清空集合，否则不能检测描述符变化&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    FD_SET(sock,&amp;amp;amp;fds); &lt;span class=&quot;comment&quot;&gt;//添加描述符&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    FD_SET(fp,&amp;amp;amp;fds); &lt;span class=&quot;comment&quot;&gt;//同上&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    maxfdp=sock&amp;amp;gt;fp?sock+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:fp+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//描述符最大值加1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// for(int i =0 ;i &amp;amp;lt; maxfds; i++) if(FD_ISSET()) &amp;#123; &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(select(maxfdp,&amp;amp;amp;fds,&amp;amp;amp;fds,&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&amp;amp;amp;timeout)) &lt;span class=&quot;comment&quot;&gt;//select使用&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//select错误，退出程序&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//再次轮询&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(FD_ISSET(sock,&amp;amp;amp;fds)) &lt;span class=&quot;comment&quot;&gt;//测试sock是否可读，即是否网络上有数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                recvfrom(sock,buffer,&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;,.....);&lt;span class=&quot;comment&quot;&gt;//接受网络数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(FD_ISSET(fp,&amp;amp;amp;fds)) &lt;span class=&quot;comment&quot;&gt;//测试文件是否可写&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                fwrite(fp,buffer...);&lt;span class=&quot;comment&quot;&gt;//写入文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; ......&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;poll&quot;&gt;&lt;a href=&quot;#poll&quot; class=&quot;headerlink&quot; title=&quot;poll&quot;&gt;&lt;/a&gt;poll&lt;/h2&gt;&lt;p&gt;poll函数类似于 select，可用于任何类型的文件描述符，与 select 不同，poll不是为每个状态（可读性、可写性和异常状态）构造一个描述符集，而是构造一个pollfd 结构数组向内核传递需要关注的事件，故没有描述符个数的限制，每个数组元素指定一个描述符编号以及对其所关心的状态，pollfd中的events字段和revents字段分别用于标示关注的事件和发生的事件。&lt;/p&gt;
&lt;p&gt;poll的实现机制与select类似，其对应内核中的sys_poll，只不过poll向内核传递pollfd数组，然后对pollfd中的每个描述符进行poll，poll返回后，需要对pollfd中的每个元素检查其revents值，来判断事件是否发生。&lt;/p&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;p&gt;-1：有错误产生&lt;br&gt;0：超时时间到，而且没有描述符有状态变化&lt;br&gt;大于0：有状态变化的描述符个数&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; pollfd fdarray[],&lt;span class=&quot;keyword&quot;&gt;nfds_t&lt;/span&gt; nfds,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; timeout)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; pollfd&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd; &lt;span class=&quot;comment&quot;&gt;//需要检查的文件描述符&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; events; &lt;span class=&quot;comment&quot;&gt;//等待的需要测试事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; revents; &lt;span class=&quot;comment&quot;&gt;//实际发生了的事件，也就是返回结果&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;应将每个数组元素的events成员设置为下图所示的值。通过这些值告诉内核我们对该描述符关心的是什么。返回时，内核设置revents成员，以说明对于该描述符已经发生了什么事件。（注意，poll没有更改events成员，这与select不同，select修改其参数以指示哪一个描述符已准备好了。）&lt;/p&gt;
&lt;p&gt;timeout == -1 永远等待。当所指定的描述符中的一个已准备好，或捕捉到一个信号时则返回。如果捕捉到一个信号，则poll返回-1，errno设置为EINTR timeout == 0 不等待 timeout &amp;gt; 0 等待timeout毫秒，如果已超时但是还没有一个描述符准备好，则返回值是0。&lt;/p&gt;
&lt;p&gt;运行流程&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; pollfd fds[IN_FILES];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[MAX_BUFFER_SIZE];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,res,real_read, maxfd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fds[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].fd = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((fds[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].fd=open(&amp;amp;quot;data1&amp;amp;quot;,O_RDONLY|O_NONBLOCK)) &amp;amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;,&amp;amp;quot;open data1 error:%s&amp;amp;quot;,strerror(errno));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((fds[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;].fd=open(&amp;amp;quot;data2&amp;amp;quot;,O_RDONLY|O_NONBLOCK)) &amp;amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;,&amp;amp;quot;open data2 error:%s&amp;amp;quot;,strerror(errno));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;amp;lt; IN_FILES; i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fds[i].events = POLLIN;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(fds[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].events || fds[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].events || fds[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;].events)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (poll(fds, IN_FILES, TIME_DELAY) &amp;amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&amp;amp;quot;Poll error\n&amp;amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;amp;lt; IN_FILES; i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fds[i].revents)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(buf, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, MAX_BUFFER_SIZE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            real_read = read(fds[i].fd, buf, MAX_BUFFER_SIZE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (real_read &amp;amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (errno != EAGAIN)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!real_read)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                close(fds[i].fd);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                fds[i].events = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ......&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;epoll&quot;&gt;&lt;a href=&quot;#epoll&quot; class=&quot;headerlink&quot; title=&quot;epoll&quot;&gt;&lt;/a&gt;epoll&lt;/h2&gt;&lt;p&gt;epoll通过epoll_create创建一个用于epoll轮询的描述符，通过epoll_ctl添加/修改/删除事件，通过epoll_wait 检查事件，epoll_wait 的第二个参数用于存放结果。&lt;/p&gt;
&lt;p&gt;epoll与select、poll不同，首先，其不用每次调用都向内核拷贝事件描述信息，在第一次调用后，事件信息就会与对应的epoll描述符关联起来。另外epoll不是通过轮询，而是通过在等待的描述符上注册回调函数，当事件发生时，回调函数负责把发生的事件存储在就绪事件链表中，最后写到用户空间。&lt;/p&gt;
&lt;p&gt;epoll返回后，该参数指向的缓冲区中即为发生的事件，对缓冲区中每个元素进行处理即可，而不需要像poll、select那样进行轮询检查。&lt;/p&gt;
&lt;p&gt;系统调用：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;epoll_create&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;epoll的事件注册函数，它与select()是在监听事件时告诉内核要监听什么类型的事件不同，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;EPOLL_CTL_ADD：注册新的fd到epfd中；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;EPOLL_CTL_MOD：修改已经注册的fd的监听事件；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;EPOLL_CTL_DEL：从epfd中删除一个fd；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;epoll_ctl&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; epfd, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; op, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; epoll_event *event)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; epoll_event结构如下：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; epoll_data &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ptr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;__uint32_t&lt;/span&gt; u32;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;__uint64_t&lt;/span&gt; u64;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;epoll_data_t&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; epoll_event&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;__uint32_t&lt;/span&gt; events; &lt;span class=&quot;comment&quot;&gt;//Epoll events&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;epoll_data_t&lt;/span&gt; data; &lt;span class=&quot;comment&quot;&gt;//User data variable&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;events可以是以下几个宏的集合：&lt;br&gt;EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；&lt;br&gt;EPOLLOUT：表示对应的文件描述符可以写；&lt;br&gt;EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；&lt;br&gt;EPOLLERR：表示对应的文件描述符发生错误；&lt;br&gt;EPOLLHUP：表示对应的文件描述符被挂断；&lt;br&gt;EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。&lt;br&gt;EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里&lt;br&gt;运行流程&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (n = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; n &amp;amp;lt; nfds; ++n) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (events[n].data.fd == listener) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 如果是主socket的事件的话，则表示&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 有新连接进入了，进行新连接的处理。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    client = accept(listener, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *) &amp;amp;amp;local, &amp;amp;amp;addrlen);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (client &amp;amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    perror(&amp;amp;quot;accept&amp;amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setnonblocking(client); &lt;span class=&quot;comment&quot;&gt;// 将新连接置于非阻塞模式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ev.events = EPOLLIN | EPOLLET; &lt;span class=&quot;comment&quot;&gt;// 并且将新连接也加入EPOLL的监听队列。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 注意，这里的参数EPOLLIN | EPOLLET并没有设置对写socket的监听，&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果有写操作的话，这个时候epoll是不会返回事件的，如果要对写操作&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 也监听的话，应该是EPOLLIN | EPOLLOUT | EPOLLET&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ev.data.fd = client;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (epoll_ctl(kdpfd, EPOLL_CTL_ADD, client, &amp;amp;amp;ev) &amp;amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 设置好event之后，将这个新的event通过epoll_ctl加入到epoll的监听队列里面，&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这里用EPOLL_CTL_ADD来加一个新的epoll事件，通过EPOLL_CTL_DEL来减少一个&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// epoll事件，通过EPOLL_CTL_MOD来改变一个事件的监听方式。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &amp;amp;quot;epoll &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; insertion error: fd=%d0, client);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event[n].events &amp;amp;amp; EPOLLIN) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 如果是已经连接的用户，并且收到数据，&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 那么进行读入&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd_r;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((sockfd_r = event[n].data.fd) &amp;amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    read(sockfd_r, buffer, MAXSIZE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 修改sockfd_r上要处理的事件为EPOLLOUT&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ev.data.fd = sockfd_r;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ev.events = EPOLLOUT | EPOLLET;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    epoll_ctl(epfd, EPOLL_CTL_MOD, sockfd_r, &amp;amp;amp;ev)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event[n].events &amp;amp;amp; EPOLLOUT) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 如果有数据发送&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd_w = events[n].data.fd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    write(sockfd_w, buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buffer));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 修改sockfd_w上要处理的事件为EPOLLIN&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ev.data.fd = sockfd_w;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ev.events = EPOLLIN | EPOLLET;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    epoll_ctl(epfd, EPOLL_CTL_MOD, sockfd_r, &amp;amp;amp;ev)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    do_use_fd(events[n].data.fd);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;《UNIX环境高级编程》&lt;br&gt;《UNIX网络编程I卷》&lt;br&gt; &lt;a href=&quot;http://armsword.com/2014/03/07/linux-io-multiplexing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://armsword.com/2014/03/07/linux-io-multiplexing/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;I-O复用应用场景&quot;&gt;&lt;a href=&quot;#I-O复用应用场景&quot; class=&quot;headerlink&quot; title=&quot;I/O复用应用场景&quot;&gt;&lt;/a&gt;I/O复用应用场景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当客户同时处理多个描述符(交互式输入和网络套接字)&lt;br&gt;
    
    </summary>
    
      <category term="C++与linux网络编程" scheme="http://yoursite.com/categories/C-%E4%B8%8Elinux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>并发编程之-多进程-I/O复用-多线程</title>
    <link href="http://yoursite.com/2016/07/20/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%A4%9A%E8%BF%9B%E7%A8%8B-IO%E5%A4%8D%E7%94%A8-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/07/20/并发编程-多进程-IO复用-多线程/</id>
    <published>2016-07-20T02:01:59.000Z</published>
    <updated>2016-08-08T16:49:44.710Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;自从入职百度以来，一直很忙，工作时间一直没有时间写博客，趁着周末又把深入理解操作系统重要章节看了一遍，对了部分知识有了更加深刻的理解，书真是要常读常新，久置易忘。下面分析总结下这三种常见并发编程方式：&lt;/p&gt;
&lt;h2 id=&quot;多进程echo服务器&quot;&gt;&lt;a href=&quot;#多进程echo服务器&quot; class=&quot;headerlink&quot; title=&quot;多进程echo服务器&quot;&gt;&lt;/a&gt;多进程echo服务器&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; connfd)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//事件处理函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sigchld_handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (waitpid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, WNOHANG) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;主流程&quot;&gt;&lt;a href=&quot;#主流程&quot; class=&quot;headerlink&quot; title=&quot;主流程&quot;&gt;&lt;/a&gt;主流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;服务器端打开一个socket&lt;br&gt;whil0e循环主体：&lt;/li&gt;
&lt;li&gt;接受来自客户端的连接,返回一个已连接套接字符&lt;/li&gt;
&lt;li&gt;fork初始化一个子进程,子进程提供服务&lt;/li&gt;
&lt;li&gt;父进程关闭连接描述符&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; listenfd, connfd, port;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;socklen_t&lt;/span&gt; clientlen=&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in clientaddr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (argc != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;usage: %s &amp;lt;port&amp;gt;\n&quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    port = atoi(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 根据信号编号调用事件处理函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Signal(SIGCHLD, sigchld_handler);&lt;span class=&quot;comment&quot;&gt;//用于回收子进程资源-避免僵尸进程&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    listenfd = Open_listenfd(port);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connfd = Accept(listenfd, (SA *) &amp;amp;clientaddr, &amp;amp;clientlen);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Fork() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Close(listenfd); &lt;span class=&quot;comment&quot;&gt;/* 子进程关闭监听描述符 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            echo(connfd);    &lt;span class=&quot;comment&quot;&gt;/* echo服务 */&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Close(connfd);   &lt;span class=&quot;comment&quot;&gt;/* 子进程关闭连接描述符 */&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);         &lt;span class=&quot;comment&quot;&gt;/* 子进程退出 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Close(connfd); &lt;span class=&quot;comment&quot;&gt;/* 父进程关闭连接描述符-很重要! */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;I-O复用echo服务器&quot;&gt;&lt;a href=&quot;#I-O复用echo服务器&quot; class=&quot;headerlink&quot; title=&quot;I/O复用echo服务器&quot;&gt;&lt;/a&gt;I/O复用echo服务器&lt;/h2&gt;&lt;p&gt;select函数处理类型为fd_set的描述符集合，逻辑上把描述符集合看出换一个大小为n的位向量，select有两个输入，一个是读集合的描述符集合和该集合的基数。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&quot;csapp.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* 连接描述符池*/&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxfd;        &lt;span class=&quot;comment&quot;&gt;/* 读集合的最大描述符 */&lt;/span&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fd_set read_set;  &lt;span class=&quot;comment&quot;&gt;/* 所有活动描述符集合*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fd_set ready_set; &lt;span class=&quot;comment&quot;&gt;/* 准备好读的描述符子集  */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nready;       &lt;span class=&quot;comment&quot;&gt;/* 从select中准备好读的描述符数量 */&lt;/span&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxi;         &lt;span class=&quot;comment&quot;&gt;/* highwater index into client arra */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; clientfd[FD_SETSIZE];    &lt;span class=&quot;comment&quot;&gt;/* 活动描述符集 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;rio_t&lt;/span&gt; clientrio[FD_SETSIZE]; &lt;span class=&quot;comment&quot;&gt;/* 活动读缓冲区集合 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; pool; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//初始化连接池&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init_pool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; listenfd, pool *p)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//往pool添加客户端连接符&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add_client&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; connfd, pool *p)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;check_clients&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pool *p)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; byte_cnt = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* 计算从服务器接收的总字节*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; listenfd, connfd, port; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;socklen_t&lt;/span&gt; clientlen = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in clientaddr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; pool pool; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (argc != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;usage: %s &amp;lt;port&amp;gt;\n&quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    port = atoi(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    listenfd = Open_listenfd(port);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    init_pool(listenfd, &amp;amp;pool); &lt;span class=&quot;comment&quot;&gt;//初始化连接描述符池&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 使用select等待监听描述符上的连接请求或来自标准输入上的命令 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    pool.ready_set = pool.read_set;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    pool.nready = Select(pool.maxfd+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;pool.ready_set, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 当监听描述符准备好时，添加一个新的客户端已连接描述符到连接池 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (FD_ISSET(listenfd, &amp;amp;pool.ready_set)) &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connfd = Accept(listenfd, (SA *)&amp;amp;clientaddr, &amp;amp;clientlen); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        add_client(connfd, &amp;amp;pool); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 从每个准备好的已连接描述符回送一行文本内容 */&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    check_clients(&amp;amp;pool); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;多线程echo服务器&quot;&gt;&lt;a href=&quot;#多线程echo服务器&quot; class=&quot;headerlink&quot; title=&quot;多线程echo服务器&quot;&gt;&lt;/a&gt;多线程echo服务器&lt;/h2&gt;&lt;p&gt;###重要的几点&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;while循环中为何要动态分配一个整型来存放已连接描述符?&lt;/li&gt;
&lt;li&gt;thread中Pthread_detach？&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.如果使用引用，由于线程竞争将导致意外结果，试想如果在下一次连接到来，thread例程函数中当前描述符变成下一次连接描述符&lt;br&gt;2.我们知道线程默认情况下被创建成可结合的，为了避免存储器泄漏(其资源如栈等)，每个结合线程要么被其他线程显式的收回，要么使用thread_detach被分离，待其终止由系统自动释放其资源，这样对于web程序而言是好的，因为web服务器每收到一个web浏览器的连接请求都创建一个对等线程，每个连接由一个单独的线程处理，没必要等也不愿意等到每个对等线程终止&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&quot;csapp.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; connfd)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *vargp)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; listenfd, *connfdp, port;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;socklen_t&lt;/span&gt; clientlen=&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in clientaddr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pthread_t&lt;/span&gt; tid; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (argc != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;usage: %s &amp;lt;port&amp;gt;\n&quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    port = atoi(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    listenfd = Open_listenfd(port);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connfdp = Malloc(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;//想想为啥不直接在Pthread_create使用引用参数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        *connfdp = Accept(listenfd, (SA *) &amp;amp;clientaddr, &amp;amp;clientlen); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Pthread_create(&amp;amp;tid, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, thread, connfdp);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 一个线程例程 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *vargp)&lt;/span&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; connfd = *((&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *)vargp);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Pthread_detach(pthread_self()); &lt;span class=&quot;comment&quot;&gt;//很重要，线程分离后才能在终止时由系统自动释放&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Free(vargp);                   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    echo(connfd);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Close(connfd);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;##方法优劣总结&lt;/p&gt;
&lt;h3 id=&quot;多进程&quot;&gt;&lt;a href=&quot;#多进程&quot; class=&quot;headerlink&quot; title=&quot;多进程&quot;&gt;&lt;/a&gt;多进程&lt;/h3&gt;&lt;p&gt;对于在父子进程间共享状态信息，进程有一个很清晰的模型，共享文件表不共享用户地址空间，这是优点又是缺点，一个是独立不会覆盖另一个进程的虚拟存储器，消除了许多令人迷惑的错误，另一方面使得进程间共享转态信息变的困难，共享信息-&amp;gt;得通过IPC实现，开销高&lt;/p&gt;
&lt;h3 id=&quot;I-O复用&quot;&gt;&lt;a href=&quot;#I-O复用&quot; class=&quot;headerlink&quot; title=&quot;I/O复用&quot;&gt;&lt;/a&gt;I/O复用&lt;/h3&gt;&lt;p&gt;I/O复用不等价于并发事件驱动程序，但可以作为其基础，在并发事件驱动中，流是因为某个事件而前进的，逻辑流模型=》转态机，一个转态机由一组状态，输入事件和转移构成。&lt;br&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给了码农更多对于程序行为的控制，比如编写一个事件驱动的并发服务器，为某些客户端提供他们需要的服务，基于多进程是很困难，（redis的事件处理基于I/O复用）&lt;br&gt;运行在的单一进程上下文中，每个逻辑流都能访问该进程的全部地址空间，使得在流之间共享数据变的容易-便于调试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;:&lt;br&gt;编码复杂，代码量大，随着并发粒度见笑，复杂性-上升迅速&lt;/p&gt;
&lt;h3 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h3&gt;&lt;p&gt;结合上述两者的特性，在执行模型上既有着类似多进程的多线程内核自动调度，又有着I/O复用流享用的共享整个虚拟地址空间的整个内容&lt;br&gt;线程是运行在进程上下文中的逻辑流，线程由内核自动调度，每个线程有她自己的线程上下文，包括Thread ID,栈，栈指针，程序计数器，通用目的寄存器和条件码，共享进程的整个虚拟地址空间&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;自从入职百度以来，一直很忙，工作时间一直没有时间写博客，趁着周末又把深入理解操作系统重要章节看了一遍，对了部分知识有了更加深刻的理解，书真是
    
    </summary>
    
      <category term="C++与linux网络编程" scheme="http://yoursite.com/categories/C-%E4%B8%8Elinux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>程序性能优化方法</title>
    <link href="http://yoursite.com/2016/07/18/%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/07/18/程序性能优化/</id>
    <published>2016-07-18T12:20:59.000Z</published>
    <updated>2016-08-02T15:46:28.301Z</updated>
    
    <content type="html">&lt;h1 id=&quot;程序性能优化&quot;&gt;&lt;a href=&quot;#程序性能优化&quot; class=&quot;headerlink&quot; title=&quot;程序性能优化&quot;&gt;&lt;/a&gt;程序性能优化&lt;/h1&gt;&lt;p&gt; 在深入理解os这本书中，在里面有一章是专门针对性能优化的，在高并发的系统中，程序性能直接关系到用户体验，一般来说用户容忍度总是非常低的，比如打开网页要求2s得到相应。&lt;/p&gt;
&lt;h2 id=&quot;是否可优化&quot;&gt;&lt;a href=&quot;#是否可优化&quot; class=&quot;headerlink&quot; title=&quot;是否可优化&quot;&gt;&lt;/a&gt;是否可优化&lt;/h2&gt;&lt;p&gt;思考&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *xp, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *yp)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	*xp = *xp + *yp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	*yp = *xp - *yp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	*xp = *xp - *yp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可否替换为&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *xp, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *yp)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    *xp = *xp + *yp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    *yp = *xp - *yp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    *xp = *xp - *yp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;又如&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;twiddle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *xp, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *yp)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	*xp += *yp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    *xp += *yp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可否替换为&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;twiddle1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *xp, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *yp)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*xp = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;* (*yp);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实际上上面连个看起来是传进来了不同的参数，但是当参数相同的话，结果是不一样的，优化是错的&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f() + f() + f();&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可否替换为&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*f();&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种情况下，当f调用了全局变量就会产生副作用，返回值也可能会不一样&lt;/p&gt;
&lt;h2 id=&quot;常用的优化方法&quot;&gt;&lt;a href=&quot;#常用的优化方法&quot; class=&quot;headerlink&quot; title=&quot;常用的优化方法&quot;&gt;&lt;/a&gt;常用的优化方法&lt;/h2&gt;&lt;h3 id=&quot;1-在循环中减少函数调用&quot;&gt;&lt;a href=&quot;#1-在循环中减少函数调用&quot; class=&quot;headerlink&quot; title=&quot;1.在循环中减少函数调用&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.在循环中减少函数调用&lt;/strong&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Implementation of library function strlen */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/* Compute length of string */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *s)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (*s != ’\&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;’) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		s++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		length++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lower1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *s)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(s); i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s[i] &amp;gt;= ’A’ &amp;amp;&amp;amp; s[i] &amp;lt;= ’Z’)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		s[i] -= (’A’ - ’a’);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将strlen(s)从循环中外提&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lower1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *s)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(s); &lt;span class=&quot;comment&quot;&gt;//循环中调用外提&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s[i] &amp;gt;= ’A’ &amp;amp;&amp;amp; s[i] &amp;lt;= ’Z’)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		s[i] -= (’A’ - ’a’);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-消除不必要的存储器引用&quot;&gt;&lt;a href=&quot;#2-消除不必要的存储器引用&quot; class=&quot;headerlink&quot; title=&quot;2.消除不必要的存储器引用&quot;&gt;&lt;/a&gt;&lt;strong&gt;2.消除不必要的存储器引用&lt;/strong&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vec_ptr v, &lt;span class=&quot;keyword&quot;&gt;data_t&lt;/span&gt; *dest)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length = vec_length(v); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	*dest = IDENT; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;data_t&lt;/span&gt; val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		get_vec_element(v, i, &amp;amp;val);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		*dest = *dest OPER val;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在每次循环中减少中间过程读写&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Accumulate result in local variable */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;combine4&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vec_ptr v, &lt;span class=&quot;keyword&quot;&gt;data_t&lt;/span&gt; *dest)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length = vec_length(v);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;data_t&lt;/span&gt; *data = get_vec_start(v); &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;data_t&lt;/span&gt; x = IDENT;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	*dest = IDENT;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		x = x OPER data[i]; &lt;span class=&quot;comment&quot;&gt;//循环内相除存储器引用&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	*dest = x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-循环展开&quot;&gt;&lt;a href=&quot;#3-循环展开&quot; class=&quot;headerlink&quot; title=&quot;3.循环展开&quot;&gt;&lt;/a&gt;&lt;strong&gt;3.循环展开&lt;/strong&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;vsum1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    c[i] = a[i] + b[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;循环展开为&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;``` C++&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Sum vector of n elements (n must be even) */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;vsum2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i+=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;/* Compute two elements per iteration */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        c[i] = a[i] + b[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        c[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = a[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] + b[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-提高并行性&quot;&gt;&lt;a href=&quot;#4-提高并行性&quot; class=&quot;headerlink&quot; title=&quot;4.提高并行性&quot;&gt;&lt;/a&gt;&lt;strong&gt;4.提高并行性&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;使用多个临时变量，只在必要的时候将多个临时变量合并&lt;/p&gt;
&lt;h3 id=&quot;5-重新结合变换&quot;&gt;&lt;a href=&quot;#5-重新结合变换&quot; class=&quot;headerlink&quot; title=&quot;5.重新结合变换&quot;&gt;&lt;/a&gt;&lt;strong&gt;5.重新结合变换&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;acc = (acc OP data[i]) OP data[i+1];&lt;br&gt;每次迭代都要求前一次迭代必须结束才能开始，因为第一个操作就要求读取acc的值．&lt;br&gt;acc = acc OP (data[i] OP data[i+1]);&lt;br&gt;修改后，下一次迭代的开始可以先于当前迭代的结束，因为下一次迭代可以先计算data[i] OP data[i+1]这个操作．&lt;/p&gt;
&lt;h2 id=&quot;阿姆达尔定律&quot;&gt;&lt;a href=&quot;#阿姆达尔定律&quot; class=&quot;headerlink&quot; title=&quot;阿姆达尔定律&quot;&gt;&lt;/a&gt;阿姆达尔定律&lt;/h2&gt;&lt;p&gt;阿姆达尔定律是计算机系统设计的重要定量原理之一，于1967年由IBM360系列机的主要设计者阿姆达尔首先提出。该定律是指：系统中对某一部件采用更快执行方式所能获得的系统性能改进程度，取决于这种执行方式被使用的频率，或所占总执行时间的比例。阿姆达尔定律实际上定义了采取增强（加速）某部分功能处理的措施后可获得的性能改进或执行时间的加速比。简单来说是通过更快的处理器来获得加速是由慢的系统组件所限制。&lt;br&gt;阿姆达尔曾致力于并行处理系统的研究。对于固定负载情况下描述并行处理效果的加速比s，阿姆达尔经过深入研究给出了如下公式：&lt;br&gt;$$S=1/(1-a+a/n)$$&lt;br&gt;其中，a为并行计算部分所占比例，n为并行处理结点个数。这样，当1-a=0时，(即没有串行，只有并行)最大加速比s=n；当a=0时（即只有串行，没有并行），最小加速比s=1；当n→∞时，极限加速比s→ 1/（1-a），这也就是加速比的上限。例如，若串行代码占整个代码的25%，则并行处理的总体性能不可能超过4。这一公式已被学术界所接受，并被称做“阿姆达尔定律”，也称为“安达尔定理”(Amdahl law)。&lt;/p&gt;
&lt;h2 id=&quot;C-C-中的优化&quot;&gt;&lt;a href=&quot;#C-C-中的优化&quot; class=&quot;headerlink&quot; title=&quot;C/C++中的优化&quot;&gt;&lt;/a&gt;C/C++中的优化&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如字符串初始化使用 str[‘\0’] (避免使用memeset)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;char buffer[1024] = {100} 会调用memset, 可以改为:&lt;/strong&gt;&lt;br&gt;char buffer[1024];&lt;br&gt;buffer[0] = 100&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择正确的数据结构，正确选择stl的容器&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;数据量大时可以使用std::str1 或boost中 unordered_set/map 替代&lt;br&gt;map/set, 前者基于hash实现, 后者基于rb tree实现&lt;/li&gt;
&lt;li&gt;std::list 求长度 O(n)&lt;/li&gt;
&lt;li&gt;STL 的容器用完或者使用前记得reset, 否则会膨胀, 类似内存泄漏&lt;br&gt;reset 并没真正释放内存, 可能只是修改了长度和指针位置&lt;/li&gt;
&lt;li&gt;尽量使用std::sort, 而不是自写排序&lt;/li&gt;
&lt;li&gt;使用reverse 避免不必要的内存重分配&lt;/li&gt;
&lt;li&gt;去重和查找尽量用hashmap 而不是 vector + find&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免重复申请内存&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;用可重复初始化对象, 代替每次都new&lt;/li&gt;
&lt;li&gt;重复多次申请小块内存, 可以自己实现简单的buffer管理器&lt;/li&gt;
&lt;li&gt;使用tcmalloc ?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多线程&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;多线程的调度, 让 IO 和 CPU计算 相互重叠，降低&lt;br&gt;latency&lt;/li&gt;
&lt;li&gt;能提高绝对性能, 但是平均性能提升明显&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;openmp让循环中可以并行的部分得到并行处理&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;o 打开编译选项 -fopenmp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按字节固定初始有时可使用memeset,比for循环快很多&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;测试过1亿字符串统一赋值，用memeset比for循环赋值快10倍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&amp;lt;&amp;lt;深入理解操作系统&amp;gt;&amp;gt;&lt;br&gt;&amp;lt;&amp;lt;大牛分享&amp;gt;&amp;gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;程序性能优化&quot;&gt;&lt;a href=&quot;#程序性能优化&quot; class=&quot;headerlink&quot; title=&quot;程序性能优化&quot;&gt;&lt;/a&gt;程序性能优化&lt;/h1&gt;&lt;p&gt; 在深入理解os这本书中，在里面有一章是专门针对性能优化的，在高并发的系统中，程序性能直接关系到用户体验，一
    
    </summary>
    
      <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫总结</title>
    <link href="http://yoursite.com/2016/07/11/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/07/11/网络爬虫总结/</id>
    <published>2016-07-11T02:01:59.000Z</published>
    <updated>2016-08-08T16:37:43.328Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在校期间由于到时I数据需求以及自己偶尔倒腾，写过一段时间爬虫，爬过csdn博客,天涯论坛,sina博客,sina微公益，学校就业系统数据(当时基本把全院就业数据爬下来了，包括每个人的身份证家庭住址联系方式就业去向等信息)等等,也爬过主流网站的信息当时想着做了一个粗糙的小型搜索引擎.在实习阶段写过一段时间爬虫系统，此时就主要用的scrapy框架了，爬取了7个主流手游网站游戏资讯论坛的信息.一直没有空去总结下,趁着有空总结下基本技巧&lt;/p&gt;
&lt;h2 id=&quot;关于爬取的三个方面&quot;&gt;&lt;a href=&quot;#关于爬取的三个方面&quot; class=&quot;headerlink&quot; title=&quot;关于爬取的三个方面&quot;&gt;&lt;/a&gt;关于爬取的三个方面&lt;/h2&gt;&lt;h3 id=&quot;网络爬虫归根结底是如何拿到服务器数据&quot;&gt;&lt;a href=&quot;#网络爬虫归根结底是如何拿到服务器数据&quot; class=&quot;headerlink&quot; title=&quot;网络爬虫归根结底是如何拿到服务器数据&quot;&gt;&lt;/a&gt;网络爬虫归根结底是如何拿到服务器数据&lt;/h3&gt;&lt;p&gt;在你分析完目标站点的需要的数据之后,思考如何爬取过程自动化，一般站点的数据组织方式都是有规律，比如csdn会有一个所有博客的一个汇总存档页，如果你需要爬取所有的页面博客，你需要分析第1页到第n页的页面连接url规律,然后依次请求每页数据，得到每个页的几十个博客url，下层进行每个url的深入爬取。&lt;/p&gt;
&lt;h3 id=&quot;如果你写过爬虫-你会在拿数据的过程会遇到各种各样的问题，这里做一个罗列-总结下遇到的问题以及别人总结的一些问题&quot;&gt;&lt;a href=&quot;#如果你写过爬虫-你会在拿数据的过程会遇到各种各样的问题，这里做一个罗列-总结下遇到的问题以及别人总结的一些问题&quot; class=&quot;headerlink&quot; title=&quot;如果你写过爬虫,你会在拿数据的过程会遇到各种各样的问题，这里做一个罗列,总结下遇到的问题以及别人总结的一些问题&quot;&gt;&lt;/a&gt;如果你写过爬虫,你会在拿数据的过程会遇到各种各样的问题，这里做一个罗列,总结下遇到的问题以及别人总结的一些问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;数据是ajax请求的数据，请求方式不反应在链接上&lt;br&gt;数据在请求过程受到服务器频次限制,ip被封|频次限制&lt;br&gt;数据需要登录才能抓取数据&lt;br&gt;数据是js解析后才能拿到&lt;br&gt;部分网站不管你头部具体内容是什么，总是得到gzip后的内容&lt;br&gt;服务器加上了防盗链的限制&lt;br&gt;服务器加了限制，只让常见浏览器访问&lt;br&gt;url请求时加了编码信息&lt;br&gt;https以及http爬取&lt;br&gt;验证码问题&lt;br&gt;url如何判重&lt;br&gt;数据编码问题以及请求参数编码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;大型搜索引擎爬取问题&quot;&gt;&lt;a href=&quot;#大型搜索引擎爬取问题&quot; class=&quot;headerlink&quot; title=&quot;大型搜索引擎爬取问题&quot;&gt;&lt;/a&gt;大型搜索引擎爬取问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在真实的大型爬虫系统中(比如百度),如何保证保证覆盖率，更新率，实效性，有效性&lt;br&gt;标准：全、快、准、新&lt;br&gt;覆盖率：链接是否已发现，网页是否已抓取&lt;br&gt;更新率：网页发生变化或失效后是否最大限度地发现并更新&lt;br&gt;时效性：新网页（时效性较高的网页）产生或网页发生变化后，是否及时发现、抓取、更新。&lt;br&gt;有效性：可以分为抓取有效性和存储有效性。&lt;br&gt;1）抓取有效性：是指抓取流量中有多少是抓取了有价值的东西，对CHK来说就是得到了新的链接，对GET抓回来了能建库的网页就是有效的。&lt;br&gt;2）存储有效性：是指主要是指节省link库和网页库的空间。如果存储了大量低质量的那有效性就不高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;上面的问题的一些解决方法&quot;&gt;&lt;a href=&quot;#上面的问题的一些解决方法&quot; class=&quot;headerlink&quot; title=&quot;上面的问题的一些解决方法&quot;&gt;&lt;/a&gt;上面的问题的一些解决方法&lt;/h3&gt;&lt;p&gt;&lt;strong&gt; 数据是ajax请求的数据，请求方式不反应在链接上&lt;/strong&gt;&lt;br&gt;打开浏览器解析，分析ajax的真实请求url的规律，分析请求参数，分析结果json&lt;br&gt;按照实际url和参数请求&lt;br&gt;&lt;strong&gt; 数据在请求过程受到服务器频次限制,ip被封|频次限制 &lt;/strong&gt;&lt;br&gt;使用代理IP服务器,scrapy有一个专门IP代理池&lt;br&gt;再一个可以使用sleep限制程序降低爬取频次&lt;br&gt;技术做的特别好的，封的厉害的需要获取开发者权限,token之类的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 数据需要登录才能抓取数据 &lt;/strong&gt;&lt;br&gt;使用import urllib.request&lt;br&gt;并用用字典封装post键值对作为open方法的参数，包括用户名密码等必要参数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 数据是js解析后才能拿到 &lt;/strong&gt;&lt;br&gt;使用selenium、phantomjs等模拟浏览器引擎构建一个真实的浏览器执行JS&lt;br&gt;百度也是有专门的解析器sunflower的，Sunflower采用firefox浏览器的mozilla内核，本质上就是把firefox的必要部分组装起来，得到一个同浏览器比较相似的抓取器，能够得到页面在浏览器实际展现时候的完整数据。它能够像浏览器一样处理html页面，包括js，css，xmlrequest&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 部分网站不管你头部具体内容是什么，总是得到gzip后的内容&lt;/strong&gt;&lt;br&gt;使用import gzip相应方法解压,重点要知道是有得到压缩数据情况&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 服务器加上了防盗链的限制 &lt;/strong&gt;&lt;br&gt;某些站点有反盗链设置，其实就是检查你发送请求的header里面，referer站点是不是他自己，我们只要把headers的referer改成该网站即可&lt;br&gt;&lt;strong&gt; 服务器加了限制，只让常见浏览器访问&lt;/strong&gt;&lt;br&gt;请求时加上浏览器头部，伪装成浏览器&lt;br&gt;&lt;strong&gt; url请求时加了编码信息 &lt;/strong&gt;&lt;br&gt;使用urllib.quote(‘’)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; https以及http爬取 &lt;/strong&gt;&lt;br&gt;https是加密传输，其实用scrapy爬取并没什么不一样&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 验证码问题　&lt;/strong&gt;&lt;br&gt;图像识别？训练好相应图片验证码模型，不过有些事要计算或者推理的，比较难&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; url如何判重 &lt;/strong&gt;&lt;br&gt;判重需要节省内存，一般使用布隆过滤器，在数学之美中有提到过&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 大型搜索引擎爬取问题 &lt;/strong&gt;&lt;br&gt;入职百度以来看了爬虫相关文档,发现设计考虑问题还是非常多的，有空再总结下&lt;br&gt;相关重要问题，不涉及具体实现&lt;/p&gt;
&lt;h3 id=&quot;拿到数据之后剩余的问题就是如何解析拿到想要的数据入库&quot;&gt;&lt;a href=&quot;#拿到数据之后剩余的问题就是如何解析拿到想要的数据入库&quot; class=&quot;headerlink&quot; title=&quot;拿到数据之后剩余的问题就是如何解析拿到想要的数据入库.&quot;&gt;&lt;/a&gt;拿到数据之后剩余的问题就是如何解析拿到想要的数据入库.&lt;/h3&gt;&lt;p&gt;这里主要分为两块:&lt;br&gt;&lt;strong&gt;首页如何提取html页面想要的信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解析html可以使用BeautifulSoup和xpath,有很多解析tag的方法,比起正则使用起来方便容易很多,常用的findall,find,find_next,find_parent,get_text()等等，这里不详细描述&lt;br&gt;参看官方文档,&lt;a href=&quot;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bs4 &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BeautifulSoup&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然也可以自己实现,百度就是自己C实现了解析的基础库&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;怎么存储&lt;/strong&gt;&lt;br&gt;数据量小可以直接按表格形式存入excel&lt;br&gt;推荐两个python包&lt;br&gt;import xlwt3&lt;br&gt;from xlrd import open_workbook&lt;br&gt;数据量大,使用mysql数据库或者本地文件&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在校期间由于到时I数据需求以及自己偶尔倒腾，写过一段时间爬虫，爬过csdn博客,天涯论坛,sina博客,sina微公益，学校就业系统数据(当
    
    </summary>
    
      <category term="C++与linux网络编程" scheme="http://yoursite.com/categories/C-%E4%B8%8Elinux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>linux网络socket编程(二)</title>
    <link href="http://yoursite.com/2016/06/18/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2016/06/18/网络编程基础(二)/</id>
    <published>2016-06-17T17:01:59.000Z</published>
    <updated>2016-08-10T01:09:08.812Z</updated>
    
    <content type="html">&lt;h1 id=&quot;TCP协议&quot;&gt;&lt;a href=&quot;#TCP协议&quot; class=&quot;headerlink&quot; title=&quot;TCP协议&quot;&gt;&lt;/a&gt;TCP协议&lt;/h1&gt;&lt;h2 id=&quot;TCP特性&quot;&gt;&lt;a href=&quot;#TCP特性&quot; class=&quot;headerlink&quot; title=&quot;TCP特性&quot;&gt;&lt;/a&gt;TCP特性&lt;/h2&gt;&lt;p&gt;1.在做任何处理之前，首先要建立连接。&lt;br&gt;2.提供数据通信可靠保障。TCP向另一端发送数据时，它要求对方返回一个确认。&lt;br&gt;3.TCP的全双工工作&lt;br&gt;4.TCP为发送数据的每一个字节都关联了一个序列号。如果数据不是按照指定的顺序到来，TCP会在自己的重组缓冲区中重组、去重数据，再传递给应用程序。&lt;br&gt;5.TCP提供流量控制。在双方进行交互时，会彼此通知自己目前接收缓冲区最多可以接收的数据量（通告窗口），以此确保发送方发送的数据不会溢出接收缓冲区&lt;/p&gt;
&lt;h2 id=&quot;三次握手四次挥手细节&quot;&gt;&lt;a href=&quot;#三次握手四次挥手细节&quot; class=&quot;headerlink&quot; title=&quot;三次握手四次挥手细节&quot;&gt;&lt;/a&gt;三次握手四次挥手细节&lt;/h2&gt;&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;img/tcp3.jpg&quot; alt=&quot;CSDN图标&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;tcp三次握手&quot;&gt;&lt;a href=&quot;#tcp三次握手&quot; class=&quot;headerlink&quot; title=&quot;tcp三次握手&quot;&gt;&lt;/a&gt;tcp三次握手&lt;/h2&gt;&lt;p&gt;1.服务器通过socket, bind, listen来准备接&lt;br&gt;受外来的连接&lt;br&gt;2.客户端调用connect连接服务器。这时，客户TCP发送一个SYN包，告诉服务器它将要发送数据的初始序列号。&lt;br&gt;3.服务器确认客户的SYN发送ACK包，同时自己也发送一个AYN包。&lt;br&gt;4.客户端确认服务器的SYN&lt;/p&gt;
&lt;p&gt;###需要说明：&lt;br&gt;每个SYN包都可以含有若干个TCP选项，例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MMS。通知对方他能够接受的每个TCP分节最大的数据量。&lt;br&gt;2.窗口大小。通知对方自己最大的窗口大小&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;tcp四次挥手&quot;&gt;&lt;a href=&quot;#tcp四次挥手&quot; class=&quot;headerlink&quot; title=&quot;tcp四次挥手&quot;&gt;&lt;/a&gt;tcp四次挥手&lt;/h2&gt;&lt;p&gt;•某一端调用close，主动关闭连接。向对方发送FIN包。&lt;br&gt;• 接收到FIN包的另一端将文件结束符传递给接收方的应用程序。&lt;br&gt;• 一段时间后，接收到文件结束符的应用程序调用close关闭自己的套接口，同时发送一个FIN包。&lt;br&gt;• 接收到FIN包的原发送方发送ACK对它进行确认&lt;/p&gt;
&lt;h2 id=&quot;TCP状态转换图&quot;&gt;&lt;a href=&quot;#TCP状态转换图&quot; class=&quot;headerlink&quot; title=&quot;TCP状态转换图&quot;&gt;&lt;/a&gt;TCP状态转换图&lt;/h2&gt;&lt;h2 id=&quot;理解整个图才能理解网络编程的各个转态转换流程&quot;&gt;&lt;a href=&quot;#理解整个图才能理解网络编程的各个转态转换流程&quot; class=&quot;headerlink&quot; title=&quot;理解整个图才能理解网络编程的各个转态转换流程&quot;&gt;&lt;/a&gt;理解整个图才能理解网络编程的各个转态转换流程&lt;/h2&gt;&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;img/tcp-trans.jpg&quot; alt=&quot;CSDN图标&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;整个图类似于一个状态机，给定转态和输入事件，从当前转态转换到另一个转态，&lt;br&gt;理解整个流程，在网络编程过程结合netstat才能充分理解所有套接字通信过程&lt;/p&gt;
&lt;h2 id=&quot;注意问题&quot;&gt;&lt;a href=&quot;#注意问题&quot; class=&quot;headerlink&quot; title=&quot;注意问题&quot;&gt;&lt;/a&gt;注意问题&lt;/h2&gt;&lt;p&gt;需要注意的问题：&lt;br&gt;• 关于图中time_wait状态该状态持续的时间2MSL（测试本机的MSL）&lt;br&gt;• 存在理由&lt;br&gt;维持全双工的工作过程&lt;br&gt;准许老的重复分节在网络中消逝&lt;br&gt;• word总图，tcpdump&lt;/p&gt;
&lt;h2 id=&quot;套接口的缓冲机制&quot;&gt;&lt;a href=&quot;#套接口的缓冲机制&quot; class=&quot;headerlink&quot; title=&quot;套接口的缓冲机制&quot;&gt;&lt;/a&gt;套接口的缓冲机制&lt;/h2&gt;&lt;p&gt;IPv4数据报最大大小是65535字节。&lt;br&gt;• 最大传输单元MTU（与硬件相关）。&lt;br&gt;• 如果IP数据包超过MTU，将被分片，各片断到达目的地前不会被重组。&lt;br&gt;• IPv4定义了最小重组缓冲区大小。&lt;br&gt;• TCP的MMS通告的目的就是告诉对方重组缓冲区大小的实际值，从而避免分片&lt;/p&gt;
&lt;p&gt;需要注意的问题：&lt;br&gt;• 如果套接口发送缓冲区容不下应用程序的所有数据，并且应用进程是阻塞的，应用进程将被挂起，直到所有的数据都拷贝到套接口缓冲区。&lt;br&gt;• 写一个TCP套接口的write成功返回，仅是表示可以重新使用应用进程的缓冲区，并不能&lt;br&gt;代表对方TCP或对方进程已经收到数据。&lt;br&gt;• 只有收到对方应答后，才删除自己的套接口缓冲区的内容&lt;/p&gt;
&lt;h2 id=&quot;三个数据位&quot;&gt;&lt;a href=&quot;#三个数据位&quot; class=&quot;headerlink&quot; title=&quot;三个数据位&quot;&gt;&lt;/a&gt;三个数据位&lt;/h2&gt;&lt;h3 id=&quot;RST（reset）位&quot;&gt;&lt;a href=&quot;#RST（reset）位&quot; class=&quot;headerlink&quot; title=&quot;RST（reset）位&quot;&gt;&lt;/a&gt;RST（reset）位&lt;/h3&gt;&lt;p&gt;表示请求重置连接。当TCP协议接收到&lt;br&gt;一个不能处理的数据段时，向对方TCP&lt;br&gt;协议发送这种数据段，表示这个数据段&lt;br&gt;所标识的连接出现了某种错误，请求&lt;br&gt;TCP协议将这个连接清除&lt;/p&gt;
&lt;p&gt;导致TCP协议发送RST数据段愿因：&lt;br&gt;1.SYN数据段指定的目的端口处没有接收进程在等待。&lt;br&gt;2.TCP协议想放弃一个已经存在的连接。&lt;br&gt;3.TCP接收到一个数据段，但是这个数据段所标识的连接不存在。&lt;br&gt;• 接收到RST数据段的TCP协议立即将这条连接非正常地断开，并向应用程序报告错误&lt;/p&gt;
&lt;h3 id=&quot;FIN（finish）位&quot;&gt;&lt;a href=&quot;#FIN（finish）位&quot; class=&quot;headerlink&quot; title=&quot;FIN（finish）位&quot;&gt;&lt;/a&gt;FIN（finish）位&lt;/h3&gt;&lt;p&gt;给读操作一个文件结束符。&lt;/p&gt;
&lt;h3 id=&quot;SYN（synchronize）位&quot;&gt;&lt;a href=&quot;#SYN（synchronize）位&quot; class=&quot;headerlink&quot; title=&quot;SYN（synchronize）位&quot;&gt;&lt;/a&gt;SYN（synchronize）位&lt;/h3&gt;&lt;p&gt;请求连接。在这个数据段中，TCP协议将它选择的初始序列号通知对方，并且与对方协议协&lt;br&gt;商最大数据段大小&lt;/p&gt;
&lt;h2 id=&quot;两个信号&quot;&gt;&lt;a href=&quot;#两个信号&quot; class=&quot;headerlink&quot; title=&quot;两个信号&quot;&gt;&lt;/a&gt;两个信号&lt;/h2&gt;&lt;h3 id=&quot;SIGCHLD&quot;&gt;&lt;a href=&quot;#SIGCHLD&quot; class=&quot;headerlink&quot; title=&quot;SIGCHLD&quot;&gt;&lt;/a&gt;SIGCHLD&lt;/h3&gt;&lt;p&gt;产生的原因是子进程结束，系统向其父进程发送SIGCHLD信号。在服务程序中&lt;br&gt;经常用到。&lt;br&gt;处理方法：wait&lt;/p&gt;
&lt;h3 id=&quot;SIGPIPE&quot;&gt;&lt;a href=&quot;#SIGPIPE&quot; class=&quot;headerlink&quot; title=&quot;SIGPIPE&quot;&gt;&lt;/a&gt;SIGPIPE&lt;/h3&gt;&lt;p&gt;当一个进程相接收了RST的套接口进行写操作时，内核给该进程发送一个&lt;br&gt;SIGPIPE信号。此信号缺省行为是终止进程。&lt;br&gt;处理方法：ignore&lt;br&gt;• 这两个信号的副作用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;connect可能出现的错误&lt;/strong&gt;&lt;br&gt;• 如果客户机TCP协议没有接收到对它的SYN数据段的确认，函数返回错误类型为：&lt;br&gt;ETIMEOUT。&lt;br&gt;• 如果远程TCP协议返回一个RST数据段，函数立即返回错误类型为：ECONNREFUSED。&lt;br&gt;• 如果客户机的SYN数据段导致某个路由器产生“ 目的地不可到达”类型的ICMP消息，函数以错误返回，错误类型为EHOSTUNREACH或ENETUNREACH&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;listen函数注意的问题&lt;/strong&gt;&lt;br&gt;intlisten(ints, intbacklog);&lt;br&gt;• 参数backlog的作用：&lt;br&gt;指定某个监听套接字的完成连接队列（各个版本的UNIX定义不同）的最大长度，表示这个&lt;br&gt;套接字能够接收的最大数目的未接收连接。如果当一个客户机的SYN数据段到达时，征听&lt;br&gt;套接字的完成队列已经满了，那么TCP协议将忽略这个SYN数据段&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;accept函数注意的问题&lt;/strong&gt;&lt;br&gt;当函数accept阻塞等待已经建立的连接时，如果进程捕获到信号，函数将以错误返回，错误类型为EINTR。对于这种错误，一般重新调用函数accept来接收连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;close函数注意的问题&lt;/strong&gt;&lt;br&gt;调用close之后，进程将不再能够访问这个套接字，但TCP协议将继续使用这个&lt;br&gt;套接字，将尚未发送的数据传递到对方，然后发送FIN数据段，执行关闭操作，一直等到这个TCP连接完全关闭之后，TCP协议才删除该套接字&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;read和write函数注意的问题&lt;/strong&gt;&lt;br&gt;• read：&lt;br&gt;接收到FIN包：read函数返回0，并且以后所有在这个套接字上的读操作均返回0。&lt;br&gt;接收到RST包：read将以错误返回，错误类型为ECONNERESET。并且以后所有在这个套接字上的读操作均返回错误。错误返回时返回值小于0。&lt;/p&gt;
&lt;p&gt; • write：&lt;br&gt;1.套接字发送缓冲区有足够拷贝所有用户数据的空间时，函数write将数据拷贝到这个缓冲&lt;br&gt;区中，并返回写入的数量大小。&lt;br&gt;2.如果可用空间小于write参数len指定的大小时，函数write将阻塞不返回，等待缓冲区有&lt;br&gt;足够的空间。&lt;br&gt;3.当TCP协议接收到RST数据包，函数write将以错误返回，错误类型为EINTR。以后可以&lt;br&gt;继续在这个套接字上写数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;select函数注意的问题&lt;/strong&gt;&lt;br&gt;• 可以等待内核中多个事件的任何一个发生，并在发生时唤醒进程。&lt;br&gt;• 最简单的用途是一个比sleep更精准的定时器。&lt;br&gt;• 需要注意的是select有最大描述字的限制，在linux中定义在&lt;sys select.h=&quot;&quot;&gt;&lt;bits types.h=&quot;&quot;&gt;中，修改需要重新编译内核，但是可能会存在问题&lt;/bits&gt;&lt;/sys&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCP协议&quot;&gt;&lt;a href=&quot;#TCP协议&quot; class=&quot;headerlink&quot; title=&quot;TCP协议&quot;&gt;&lt;/a&gt;TCP协议&lt;/h1&gt;&lt;h2 id=&quot;TCP特性&quot;&gt;&lt;a href=&quot;#TCP特性&quot; class=&quot;headerlink&quot; title=&quot;TCP
    
    </summary>
    
      <category term="C++与linux网络编程" scheme="http://yoursite.com/categories/C-%E4%B8%8Elinux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>linux网络socket编程(一)</title>
    <link href="http://yoursite.com/2016/06/15/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
    <id>http://yoursite.com/2016/06/15/网络编程基础(一)/</id>
    <published>2016-06-14T17:01:59.000Z</published>
    <updated>2016-08-10T01:09:27.240Z</updated>
    
    <content type="html">&lt;h1 id=&quot;网络编程常见数据结构定义&quot;&gt;&lt;a href=&quot;#网络编程常见数据结构定义&quot; class=&quot;headerlink&quot; title=&quot;网络编程常见数据结构定义&quot;&gt;&lt;/a&gt;网络编程常见数据结构定义&lt;/h1&gt;&lt;h2 id=&quot;IP地址定义-32位无符号整数&quot;&gt;&lt;a href=&quot;#IP地址定义-32位无符号整数&quot; class=&quot;headerlink&quot; title=&quot;IP地址定义-32位无符号整数&quot;&gt;&lt;/a&gt;IP地址定义-32位无符号整数&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; in_addr &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s_addr;&lt;span class=&quot;comment&quot;&gt;/*网络字节序，大端*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;为何将一个变量放在结构体？-历史遗留问题，因广泛采用留下来了&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//主机字节序转换为网络字节序&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;htonl&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hostlong)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hostshort)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//网络字节序转换为主机字节序&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ntohl&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; netlong)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;htohs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; netshort)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inet_aton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *p,&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; in_addr *inp)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;inet_ntoa&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; in_addr in)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;DNS主机条目&quot;&gt;&lt;a href=&quot;#DNS主机条目&quot; class=&quot;headerlink&quot; title=&quot;DNS主机条目&quot;&gt;&lt;/a&gt;DNS主机条目&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//DNS主机条目&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; hostent&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *h_name; &lt;span class=&quot;comment&quot;&gt;//域名&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **h_aliases; &lt;span class=&quot;comment&quot;&gt;//空结束的字符串数组-域名&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; h_addrtype; &lt;span class=&quot;comment&quot;&gt;//主机地址类型&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; h_length; &lt;span class=&quot;comment&quot;&gt;//地址长度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **h_addr_list;&lt;span class=&quot;comment&quot;&gt;//非空地址结构数组-ip地址&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;套接字接口&quot;&gt;&lt;a href=&quot;#套接字接口&quot; class=&quot;headerlink&quot; title=&quot;套接字接口&quot;&gt;&lt;/a&gt;&lt;strong&gt;套接字接口&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;img/socket.jpg&quot; alt=&quot;CSDN图标&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;strong&gt;一般套接字地址结构&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; sa_family;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; sa_data[&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因特网形式的地址结构*&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; sin_family;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; sin_port; &lt;span class=&quot;comment&quot;&gt;//16位端口号0-65536&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; in_addr sin_addr; &lt;span class=&quot;comment&quot;&gt;//结构体32位ip地址&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; sin_zero[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;headerlink&quot; title=&quot;客户端&quot;&gt;&lt;/a&gt;客户端&lt;/h3&gt;&lt;p&gt;与服务器建立连接，返回一个套接字描述符&lt;br&gt;主要调用socket,connect这两个函数&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* $begin open_clientfd */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;open_clientfd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *hostname, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; port)&lt;/span&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; clientfd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; hostent *hp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in serveraddr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((clientfd = socket(AF_INET, SOCK_STREAM, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* check errno for cause of error */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 初始化ip地址和端口号*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((hp = gethostbyname(hostname)) == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* check h_errno for cause of error */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    bzero((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *) &amp;amp;serveraddr, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(serveraddr));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    serveraddr.sin_family = AF_INET;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    bcopy((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)hp-&amp;gt;h_addr_list[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&amp;amp;serveraddr.sin_addr.s_addr, hp-&amp;gt;h_length);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    serveraddr.sin_port = htons(port);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 和服务器建立连接*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (connect(clientfd, (SA *) &amp;amp;serveraddr, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(serveraddr)) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; clientfd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;/&lt;em&gt; $end open_clientfd &lt;/em&gt;/&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;### 服务器端&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;主要调用bind,listen,accept三个函数来与用户建立连接&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#### bind&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;``` C&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int bind(int sockfd,struct sockaddr *my_addr,int addrlen);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成功返回0,出错返回-1&lt;br&gt;&lt;strong&gt;告诉内核将my_addr中的服务器套接字地址与套接字描述符sockfd联系起来,参数addrlen＝sizeof(sockaddr_in)&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;listen&quot;&gt;&lt;a href=&quot;#listen&quot; class=&quot;headerlink&quot; title=&quot;listen&quot;&gt;&lt;/a&gt;listen&lt;/h4&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; backlog)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//成功返回0，出错返回-1&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;将sockfd从一个主动套接字转化为一个监听套接字-可以接受来自客户端的连接请求&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* $begin open_listenfd */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;open_listenfd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; port)&lt;/span&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; listenfd, optval=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in serveraddr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 创建套接字描述符 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((listenfd = socket(AF_INET, SOCK_STREAM, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Eliminates &quot;Address already in use&quot; error from bind. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;optval , &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Listenfd will be an endpoint for all requests to port&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       on any IP address for this host */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    bzero((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *) &amp;amp;serveraddr, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(serveraddr));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    serveraddr.sin_family = AF_INET; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    serveraddr.sin_port = htons((&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt;)port); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (bind(listenfd, (SA *)&amp;amp;serveraddr, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(serveraddr)) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Make it a listening socket ready to accept connection requests */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (listen(listenfd, LISTENQ) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; listenfd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* $end open_listenfd */&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;accept函数&quot;&gt;&lt;a href=&quot;#accept函数&quot; class=&quot;headerlink&quot; title=&quot;accept函数&quot;&gt;&lt;/a&gt;accept函数&lt;/h4&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; listenfd,&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *addr,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *addrlen)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;成功返回非负已连接描述符，出错返回-1&lt;br&gt;&lt;strong&gt;等待来自客户端的连接请求到达侦听描述符listenfd，然后在addr中填写客户端的套接字地址，返回一个已连接描述符&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;h3 id=&quot;为何要有监听描述符合已连接描述符区别&quot;&gt;&lt;a href=&quot;#为何要有监听描述符合已连接描述符区别&quot; class=&quot;headerlink&quot; title=&quot;为何要有监听描述符合已连接描述符区别&quot;&gt;&lt;/a&gt;为何要有监听描述符合已连接描述符区别&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;主要为了建立并发服务器,它能够同时处理许多客户端连接,例如每一个连接请求到达&lt;br&gt;监听描述符时,可以派生一个新的进程通过已连接描述符与客户端通信&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;客户端主要流程&quot;&gt;&lt;a href=&quot;#客户端主要流程&quot; class=&quot;headerlink&quot; title=&quot;客户端主要流程&quot;&gt;&lt;/a&gt;客户端主要流程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;socket-&amp;gt;connect&lt;br&gt;调用socket创建套接字描述符,调用connect和服务器ip+iport进行连接,&lt;br&gt;阻塞在connect&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;服务器主要流程&quot;&gt;&lt;a href=&quot;#服务器主要流程&quot; class=&quot;headerlink&quot; title=&quot;服务器主要流程&quot;&gt;&lt;/a&gt;服务器主要流程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;socket-&amp;gt;bind-&amp;gt;listen-&amp;gt;(多个accept)&lt;br&gt;调用socket创建套接字描述符,调用bind将ip+port与套接字描述符绑定调用listen告诉内核socket是被服务器而非客户端使用,将一个主要套接字转换为监听套接字&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;网络编程常见数据结构定义&quot;&gt;&lt;a href=&quot;#网络编程常见数据结构定义&quot; class=&quot;headerlink&quot; title=&quot;网络编程常见数据结构定义&quot;&gt;&lt;/a&gt;网络编程常见数据结构定义&lt;/h1&gt;&lt;h2 id=&quot;IP地址定义-32位无符号整数&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="C++与linux网络编程" scheme="http://yoursite.com/categories/C-%E4%B8%8Elinux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>布隆过滤器浅谈</title>
    <link href="http://yoursite.com/2016/06/11/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://yoursite.com/2016/06/11/布隆过滤器/</id>
    <published>2016-06-11T12:41:56.000Z</published>
    <updated>2016-08-07T16:22:24.568Z</updated>
    
    <content type="html">&lt;h2 id=&quot;布隆过滤器&quot;&gt;&lt;a href=&quot;#布隆过滤器&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器&quot;&gt;&lt;/a&gt;布隆过滤器&lt;/h2&gt;&lt;h2 id=&quot;之前就阅读过数学之美，知道有这么个基础的算法，可是因为不常用到也就没当回事，最近重新看到它觉得很高大上，就想来mark下&quot;&gt;&lt;a href=&quot;#之前就阅读过数学之美，知道有这么个基础的算法，可是因为不常用到也就没当回事，最近重新看到它觉得很高大上，就想来mark下&quot; class=&quot;headerlink&quot; title=&quot;之前就阅读过数学之美，知道有这么个基础的算法，可是因为不常用到也就没当回事，最近重新看到它觉得很高大上，就想来mark下&quot;&gt;&lt;/a&gt;之前就阅读过数学之美，知道有这么个基础的算法，可是因为不常用到也就没当回事，最近重新看到它觉得很高大上，就想来mark下&lt;/h2&gt;&lt;p&gt;设计初衷：&lt;br&gt;（Bloom Filter）是由布隆（Burton Howard Bloom）在1970年提出的，不知道当时布隆为啥想到设计时究竟是碰到了啥问题，但这确实很有效&lt;br&gt;&lt;strong&gt;来看下面的问题：&lt;br&gt;1.检查一个单词是否拼写正确-&amp;gt;看它是否在已经字典中&lt;br&gt;2.网络爬虫-&amp;gt;一个网址是否访问过&lt;br&gt;3.邮件过滤，建立那些发垃圾邮件的地址的黑名单&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你可能会说哈希表不就行了吗，但在2,3的问题中，网页和垃圾邮件地址全球动不动便是几十亿那，哈希的存储效率也就50%左右&lt;/strong&gt;&lt;br&gt;    一亿Email（一个占16字节）约为1.6GB内存，要是几十亿个地址就几百GB，需要耗费很大代码&lt;br&gt;所以啊，能不能少花点内存来干这事：于是布隆过滤器来了，只要12.5%到25%的哈希表空间就能干这事，但是有点小错误，这个小错误概率太小就基本不担心了&lt;/p&gt;
&lt;p&gt;工作原理：&lt;br&gt;一亿Email =&amp;gt; 16亿二进制（bit)==2亿字节（哈希就是16亿字节了）&lt;/p&gt;
&lt;h3 id=&quot;1-先全部位清0，对每一个电子邮件地址X，用8个不同的随机数产生器（F1，F2，-F8-产生8个信息指纹（比如md5&quot;&gt;&lt;a href=&quot;#1-先全部位清0，对每一个电子邮件地址X，用8个不同的随机数产生器（F1，F2，-F8-产生8个信息指纹（比如md5&quot; class=&quot;headerlink&quot; title=&quot;1.先全部位清0，对每一个电子邮件地址X，用8个不同的随机数产生器（F1，F2，..F8)产生8个信息指纹（比如md5),&quot;&gt;&lt;/a&gt;1.先全部位清0，对每一个电子邮件地址X，用8个不同的随机数产生器（F1，F2，..F8)产生8个信息指纹（比如md5),&lt;/h3&gt;&lt;p&gt;###2.然后用一个统一的随机数产生器G把这8个信息指纹=&amp;gt;8个自然数g1,g2,g3..,g8,这些位置上的位置为1&lt;/p&gt;
&lt;p&gt;1亿个地址放入建好这个布隆过滤器&lt;/p&gt;
&lt;p&gt;然后新来一个，同样处理，对应8个二进制位 t1,t2,…,t8&lt;br&gt;如果全为1，好的=&amp;gt;判定位垃圾邮件&lt;/p&gt;
&lt;p&gt;你会想了，这样靠谱不，万一把非垃圾邮件误判了咋办&lt;/p&gt;
&lt;p&gt;我们来看看误判的概率：&lt;br&gt;先来算任何一个位被置为1的概率p，这样你可以简单的就知道&lt;br&gt;新来一个，有8个位，如果被误判了，此时这8个位全为1，其概率为$$p^8$$&lt;br&gt;我们来推到下一般的情况，假设有m个位，n个元素，有k个哈希函数，&lt;br&gt;针对单个元素插入来说：&lt;br&gt;$$任一个位被置为1的概率：1/m$$&lt;br&gt;$$K个函数都没有把它置为1：（1-1/m)^k$$&lt;br&gt;$$插入了那个元素依然没有被置为1：（1-1/m)^{kn}$$&lt;br&gt;$$反过来说，一个位被置为1：1-（1-1/m)^{kn}$$&lt;br&gt;同样的新来一个，要命中其概率为：&lt;br&gt;$1-[1-1/m]^{kn})^k 近似（1-e^{-kn/m})^k$&lt;br&gt;上次k=8,n/m=1/16,计算值大约在万分之五，误判率非常低，基本可容忍。*&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;布隆过滤器&quot;&gt;&lt;a href=&quot;#布隆过滤器&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器&quot;&gt;&lt;/a&gt;布隆过滤器&lt;/h2&gt;&lt;h2 id=&quot;之前就阅读过数学之美，知道有这么个基础的算法，可是因为不常用到也就没当回事，最近重新看到它觉得很高大上，就
    
    </summary>
    
      <category term="Data structure and Algorithm" scheme="http://yoursite.com/categories/Data-structure-and-Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>字典树实现</title>
    <link href="http://yoursite.com/2016/06/10/%E5%AD%97%E5%85%B8%E6%A0%91%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/06/10/字典树实现/</id>
    <published>2016-06-10T13:41:56.000Z</published>
    <updated>2016-08-11T00:38:42.661Z</updated>
    
    <content type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;Trie树，又称字典树，单词查找树或者前缀树，是一种用于快速检索的多叉树结构，如英文字母的字典树是一个26叉树，数字的字典树是一个10叉树。&lt;/p&gt;
&lt;h3 id=&quot;Trie树的基本性质可以归纳为：&quot;&gt;&lt;a href=&quot;#Trie树的基本性质可以归纳为：&quot; class=&quot;headerlink&quot; title=&quot;Trie树的基本性质可以归纳为：&quot;&gt;&lt;/a&gt;Trie树的基本性质可以归纳为：&lt;/h3&gt;&lt;p&gt;（1）根节点不包含字符，除根节点意外每个节点只包含一个字符。&lt;/p&gt;
&lt;p&gt;（2）从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。&lt;/p&gt;
&lt;p&gt;（3）每个节点的所有子节点包含的字符串不相同。&lt;/p&gt;
&lt;h3 id=&quot;Trie树复杂度分析&quot;&gt;&lt;a href=&quot;#Trie树复杂度分析&quot; class=&quot;headerlink&quot; title=&quot;Trie树复杂度分析&quot;&gt;&lt;/a&gt;Trie树复杂度分析&lt;/h3&gt;&lt;p&gt;（1） 插入、查找的时间复杂度均为O(N)，其中N为字符串长度。&lt;/p&gt;
&lt;p&gt;（2） 空间复杂度是26^n级别的，非常庞大（可采用双数组实现改善）。&lt;/p&gt;
&lt;h3 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h3&gt;&lt;p&gt;Trie是一种非常简单高效的数据结构，但有大量的应用实例&lt;br&gt;1） 字符串检索&lt;br&gt;事先将已知的一些字符串（字典）的有关信息保存到trie树里，查找另外一些未知字符串是否出现过或者出现频率&lt;/p&gt;
&lt;p&gt;举例：&lt;br&gt;@  给出N 个单词组成的熟词表，以及一篇全用小写英文书写的文章，请你按最早出现的顺序写出所有不在熟词表中的生词&lt;/p&gt;
&lt;p&gt;@  给出一个词典，其中的单词为不良单词。单词均为小写字母。再给出一段文本，文本的每一行也由小写字母构成。判断文本中是否含有任何不良单词。例如，若rob是不良单词，那么文本problem含有不良单词&lt;/p&gt;
&lt;p&gt;2）字符串最长公共前缀&lt;/p&gt;
&lt;p&gt;Trie树利用多个字符串的公共前缀来节省存储空间，反之，当我们把大量字符串存储到一棵trie树上时，我们可以快速得到某些字符串的公共前缀&lt;/p&gt;
&lt;p&gt;@ 给出N 个小写英文字母串，以及Q 个询问，即询问某两个串的最长公共前缀的长度是多少？&lt;/p&gt;
&lt;p&gt;解决方案：首先对所有的串建立其对应的字母树。此时发现，对于两个串的最长公共前缀的长度即它们所在结点的公共祖先个数，于是，问题就转化为了离线（Offline）的最近公共祖先（Least Common Ancestor，简称LCA）问题&lt;/p&gt;
&lt;p&gt;3）排序&lt;/p&gt;
&lt;p&gt;Trie树是一棵多叉树，只要先序遍历整棵树，输出相应的字符串便是按字典序排序的结果&lt;/p&gt;
&lt;h2 id=&quot;算法实现&quot;&gt;&lt;a href=&quot;#算法实现&quot; class=&quot;headerlink&quot; title=&quot;算法实现&quot;&gt;&lt;/a&gt;算法实现&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;133&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;134&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;135&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;136&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;137&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;138&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;139&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;140&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;141&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;142&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;143&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;144&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;145&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;146&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;147&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;148&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;149&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;150&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;151&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;152&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;153&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;154&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;155&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;156&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;157&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;158&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;159&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;160&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;161&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;162&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;163&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;164&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;165&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;166&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;167&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;168&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;169&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;170&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;171&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;173&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;174&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;175&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;176&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;177&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;178&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;179&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;180&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;181&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;182&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;183&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;184&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;185&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;186&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;187&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;188&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;189&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;190&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;191&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;192&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;193&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;194&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;195&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;196&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;197&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;198&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;199&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;200&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;201&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;202&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;203&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;204&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;205&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;206&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;207&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;208&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;209&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;210&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;211&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;212&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;213&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;214&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;215&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;216&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;217&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;218&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;219&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;220&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;221&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;222&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;223&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;224&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;225&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;226&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;227&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;228&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;229&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;230&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;231&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;232&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MaxBranchNum = &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//如果区分大小写，可以扩展到52&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*定义trie树结点*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; TrieNode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* word; &lt;span class=&quot;comment&quot;&gt;//节点表示的单词&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count;  &lt;span class=&quot;comment&quot;&gt;//单词出现的次数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     TrieNode* nextBranch[MaxBranchNum];&lt;span class=&quot;comment&quot;&gt;//指向26个字符节点的指针&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     TrieNode() : word(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;),count(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(nextBranch,&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(TrieNode*) * MaxBranchNum);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*定义类Trie*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Trie&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Trie();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     ~Trie();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//插入字符串str&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; count)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//查找字符串str，并返回出现的次数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//删除字符串str&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintALL&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//打印trie树中所有的结点&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintPre&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//打印以str为前缀的单词&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     TrieNode* pRoot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Destory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TrieNode* pRoot)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TrieNode* pRoot)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Trie::Trie()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     pRoot = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TrieNode();&lt;span class=&quot;comment&quot;&gt;//注意字典树的根不存放字符&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Trie::~Trie()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Destory(pRoot);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*插入一个单词*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Trie::Insert(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     assert(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; != str);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     TrieNode* pLoc = pRoot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;str[i];i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          index = str[i] - &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//如果区分大小写，可以扩展&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(index &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || index &amp;gt; MaxBranchNum)&lt;span class=&quot;comment&quot;&gt;//不执行插入&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; == pLoc-&amp;gt;nextBranch[index])&lt;span class=&quot;comment&quot;&gt;//该单词的前缀不存在，要生成该结点&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               pLoc-&amp;gt;nextBranch[index] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TrieNode();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          pLoc = pLoc-&amp;gt;nextBranch[index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; != pLoc-&amp;gt;word)&lt;span class=&quot;comment&quot;&gt;//单词已经出现过&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          pLoc-&amp;gt;count++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;//单词没有出现过，应该插入单词&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          pLoc-&amp;gt;count++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          pLoc-&amp;gt;word = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(str) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          assert(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; != pLoc-&amp;gt;word);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;strcpy&lt;/span&gt;(pLoc-&amp;gt;word,str);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*查找一个单词，如果存在该单词，则返回其出现次数*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; Trie::Search(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; count)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     assert(str != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     TrieNode* pLoc = pRoot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(pLoc &amp;amp;&amp;amp; *str)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          index = *str - &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//如果区分大小写，可以扩展&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(index &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || index &amp;gt; MaxBranchNum)&lt;span class=&quot;comment&quot;&gt;//不是一个单词，不执行插入&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          pLoc = pLoc-&amp;gt;nextBranch[index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          str++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pLoc &amp;amp;&amp;amp; pLoc-&amp;gt;word)&lt;span class=&quot;comment&quot;&gt;//条件成立，找到该单词&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          count = pLoc-&amp;gt;count;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; Trie::Remove(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     assert(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; != str);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     TrieNode* pLoc = pRoot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(pLoc &amp;amp;&amp;amp; *str)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          index = *str - &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//如果区分大小写，可以扩展&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(index &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || index &amp;gt; MaxBranchNum)&lt;span class=&quot;comment&quot;&gt;//不是一个单词，不执行插入&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          pLoc = pLoc-&amp;gt;nextBranch[index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          str++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pLoc &amp;amp;&amp;amp; pLoc-&amp;gt; word)&lt;span class=&quot;comment&quot;&gt;//条件成立，找到该单词&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;[] pLoc-&amp;gt;word;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          pLoc-&amp;gt;word = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Trie::PrintALL()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Print(pRoot);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Trie::PrintPre(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     assert(str != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     TrieNode* pLoc = pRoot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(pLoc &amp;amp;&amp;amp; *str)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          index = *str - &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//如果区分大小写，可以扩展&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(index &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || index &amp;gt; MaxBranchNum)&lt;span class=&quot;comment&quot;&gt;//不是一个单词，不执行插入&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          pLoc = pLoc-&amp;gt;nextBranch[index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          str++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pLoc)&lt;span class=&quot;comment&quot;&gt;//条件成立，找到该单词&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          Print(pLoc);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*按照字典顺序输出以pRoot为根的所有的单词*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Trie::Print(TrieNode* pRoot)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; == pRoot)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//输出单词&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; != pRoot-&amp;gt;word)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;pRoot-&amp;gt;word&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;&amp;lt;&amp;lt;pRoot-&amp;gt;count&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//递归处理分支&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i &amp;lt; MaxBranchNum;i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          Print(pRoot-&amp;gt;nextBranch[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*销毁trie树*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Trie::Destory(TrieNode* pRoot)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; == pRoot)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i &amp;lt; MaxBranchNum;i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          Destory(pRoot-&amp;gt;nextBranch[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//销毁单词占得空间&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; != pRoot-&amp;gt;word)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; []pRoot-&amp;gt;word;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          pRoot-&amp;gt;word = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; pRoot;&lt;span class=&quot;comment&quot;&gt;//销毁结点&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     pRoot = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Trie t;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; str;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//int count = -1;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,m,count;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;n)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;++i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;str;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               t.Insert(str.c_str());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;m;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;m;++i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;str;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; isFind = t.Search(str.c_str(),count);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;isfind:&quot;&lt;/span&gt;&amp;lt;&amp;lt;isFind&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(isFind)&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;count&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     system(&lt;span class=&quot;string&quot;&gt;&quot;pause&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;Trie树，又称字典树，单词查找树或者前缀树，是一种用于快速检索的多叉树结构，如英文字母的字典树是一个26叉树，数字的字典树是一个10叉树。
    
    </summary>
    
      <category term="Data structure and Algorithm" scheme="http://yoursite.com/categories/Data-structure-and-Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>求数据流的中位数</title>
    <link href="http://yoursite.com/2016/06/09/Leetcode%E7%BB%8F%E5%85%B8%E9%A2%98-%E6%B1%82%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2016/06/09/Leetcode经典题-求数据流的中位数/</id>
    <published>2016-06-09T13:41:56.000Z</published>
    <updated>2016-08-07T16:50:53.553Z</updated>
    
    <content type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;假设有一连续的输入数据流，设计尽可能时间空间尽可能&lt;br&gt;高效的算法来求得中位数-Leetcode经典题&lt;/p&gt;
&lt;h2 id=&quot;算法实现&quot;&gt;&lt;a href=&quot;#算法实现&quot; class=&quot;headerlink&quot; title=&quot;算法实现&quot;&gt;&lt;/a&gt;算法实现&lt;/h2&gt;&lt;p&gt;主体思想，构造两个堆，一个大根堆，一个小根堆，&lt;br&gt;插入数据时保持两个堆的平衡，这样中位数取堆定即可&lt;/p&gt;
&lt;p&gt;以下算法实现了大根堆和小根堆&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;133&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;134&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;135&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;136&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;137&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;138&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;139&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;140&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;141&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;142&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;143&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;144&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;145&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;146&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;147&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; getMidOnline&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; v1,v2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	getMidOnline()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		v1.push_back(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		v2.push_back(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;adjustDown&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;adjustUp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;adjustDown2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;adjustUp2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bulidHeap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt;&lt;/span&gt;;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insertSmall&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flag)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;headSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; getMidOnline::adjustDown(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;span class=&quot;comment&quot;&gt;//k表示要调整的位置，len表示堆大小&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=k*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;=len)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i&amp;lt;len&amp;amp;&amp;amp;v[i]&amp;lt;v[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])++i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(v[i]&amp;gt;v[i/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			swap(v[i],v[i/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; getMidOnline::adjustUp(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;  i=pos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;amp;&amp;amp;v[i]&amp;gt;v[i/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		swap(v[i],v[i/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		i=i/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; getMidOnline::adjustDown2(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;span class=&quot;comment&quot;&gt;//k表示要调整的位置，len表示堆大小&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=k*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;=len)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i&amp;lt;len&amp;amp;&amp;amp;v[i]&amp;gt;v[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])++i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(v[i]&amp;lt;v[i/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			swap(v[i],v[i/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; getMidOnline::adjustUp2(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;  i=pos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;amp;&amp;amp;v[i]&amp;lt;v[i/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		swap(v[i],v[i/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		i=i/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; getMidOnline::bulidHeap(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=len/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;i&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;--i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	adjustDown(v,i,len);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; getMidOnline::insertSmall(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flag)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	v.push_back(value);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)adjustUp2(v,v.size()&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; adjustUp(v,v.size()&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; getMidOnline::headSort(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;span class=&quot;comment&quot;&gt;//总体时间度O(nlogn)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	bulidHeap(v,len);  &lt;span class=&quot;comment&quot;&gt;//时间复杂度O(nlogn)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=len;i&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;--i)&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		swap(v[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],v[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		adjustDown(v,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//时间复杂度O(logn)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/************************************************&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*n1和n2表示两个堆的容量，新插入的数据分为三种情况&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*[d1-?,d1] [d1,d2], [d2,d2+?]三个区间&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*根据堆的大小比较以及新的数所在区间去调整堆&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*************************************************/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; getMidOnline::insert(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n1=v1.size(),n2=v2.size();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n1==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123; v1.push_back(value);&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n2==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;v2.push_back(value);&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n1==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;amp;&amp;amp;n2==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(v1[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&amp;gt;v2[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])swap(v1[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],v2[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flag=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(value&amp;gt;v2[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])flag=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(value&amp;lt;v1[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])flag=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; flag =&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n1&amp;lt;=n2)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(flag)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:  insertSmall(v1,value,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				insertSmall(v1,v2[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			 	v2[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			 	adjustDown2(v2,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,v2.size()&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			 &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(flag)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:  insertSmall(v2,value,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:  &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				insertSmall(v2,v1[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			 	v1[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			 	adjustDown(v1,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,v1.size()&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			 &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; getMidOnline::get()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v1[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; getMidOnline::print()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; ostream_iterator&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; osint;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    copy(v1.begin()+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,v1.end(),osint(&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    copy(v2.begin()+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,v2.end(),osint(&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	getMidOnline s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;input:&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		s.insert(val);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;res: &quot;&lt;/span&gt;&amp;lt;&amp;lt;s.get()&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		s.print();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;假设有一连续的输入数据流，设计尽可能时间空间尽可能&lt;br&gt;高效的算法来求得中位数-Leetcode经典题&lt;/p&gt;
&lt;h2 id=&quot;算法实现&quot;
    
    </summary>
    
      <category term="Data structure and Algorithm" scheme="http://yoursite.com/categories/Data-structure-and-Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>设计一个LRU-Cache</title>
    <link href="http://yoursite.com/2016/06/03/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AALRU%20Cache/"/>
    <id>http://yoursite.com/2016/06/03/设计一个LRU Cache/</id>
    <published>2016-06-03T12:41:56.000Z</published>
    <updated>2016-08-07T16:22:53.784Z</updated>
    
    <content type="html">&lt;h1 id=&quot;设计一个LRU-Cache&quot;&gt;&lt;a href=&quot;#设计一个LRU-Cache&quot; class=&quot;headerlink&quot; title=&quot;设计一个LRU Cache&quot;&gt;&lt;/a&gt;设计一个LRU Cache&lt;/h1&gt;&lt;p&gt;本题源自LeetCode,发现是一个比较好的问题，就拿来分析下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LRU Cache My Submissions QuestionEditorial Solution&lt;br&gt;Total Accepted: 74197 Total Submissions: 469395 Difficulty: Hard&lt;br&gt;Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.&lt;br&gt;set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.&lt;/p&gt;
&lt;p&gt;Subscribe to see which companies asked this question&lt;/p&gt;
&lt;p&gt;设计一个key-value类型的LRU缓存：&lt;br&gt;1.首先由key-value要求可定义结构体节点&lt;br&gt;2.如何组织这些节点便于&lt;br&gt;a.快速插入或者替换&lt;br&gt;b.快速随机读取某个节点，比如从key读取value&lt;br&gt;如果cache不满：插入&lt;br&gt;如果cache满了：替换最老的&lt;br&gt;同时保持最近访问的在前面&lt;br&gt;从操作来看，要插入和随机读取并行&lt;br&gt;这个，自然想到链表，又要随机读取，那就只有靠hash了&lt;br&gt;3.如何设计数据结构&lt;br&gt;如下详解：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; LRUCache&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; CacheNode&amp;#123;&lt;span class=&quot;comment&quot;&gt;//设定key-value节点&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      CacheNode(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;k,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;v):key(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;k),value(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;v)&amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    LRUCache(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; capacity) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//设定cache的容量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;capacity=capacity;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;//随机访问如何做到？通过key做hash对象利用hash找到节点地址，再访问value&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(CacheMap.find(key)==CacheMap.end())&lt;span class=&quot;comment&quot;&gt;//如果不在里面返回-1表示无&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&quot;comment&quot;&gt;//如果在呢，自然是重新排序缓存列表，然后重建索引&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            CacheList.splice(CacheList.begin(),CacheList,CacheMap[key]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            CacheMap[key]=CacheList.begin();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; CacheMap[key]-&amp;gt;value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(CacheMap.find(key)==CacheMap.end())&amp;#123;&lt;span class=&quot;comment&quot;&gt;//如果不在cache里，自然是插入到cache&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(CacheList.size()==capacity)&amp;#123;&lt;span class=&quot;comment&quot;&gt;//cache满了呢？替换最老的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                CacheMap.erase(CacheList.back().key);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                CacheList.pop_back();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            CacheList.push_front(CacheNode(key,value));&lt;span class=&quot;comment&quot;&gt;//在头部插入新的，因为刚访问的优先级高&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            CacheMap[key]=CacheList.begin();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;     &lt;span class=&quot;comment&quot;&gt;//本来就有key-value的映射又set，所以就是更新相应的值，并加到列表首部，刚访问的嘛&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            CacheMap[key]-&amp;gt;value=value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            CacheList.splice(CacheList.begin(),CacheList,CacheMap[key]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            CacheMap[key]=CacheList.begin();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;&amp;lt;CacheNode&amp;gt; CacheList;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;unordered_map&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;&amp;lt;CacheNode&amp;gt;::iterator&amp;gt; CacheMap;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; capacity;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计一个LRU-Cache&quot;&gt;&lt;a href=&quot;#设计一个LRU-Cache&quot; class=&quot;headerlink&quot; title=&quot;设计一个LRU Cache&quot;&gt;&lt;/a&gt;设计一个LRU Cache&lt;/h1&gt;&lt;p&gt;本题源自LeetCode,发现是一个比较好的问题，就
    
    </summary>
    
      <category term="Data structure and Algorithm" scheme="http://yoursite.com/categories/Data-structure-and-Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>tinyhttpd-轻量级httpServer的源码实现</title>
    <link href="http://yoursite.com/2016/05/01/tinyhttpd-%E8%BD%BB%E9%87%8F%E7%BA%A7httpServer%E7%9A%84%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/05/01/tinyhttpd-轻量级httpServer的源码实现/</id>
    <published>2016-05-01T07:41:56.000Z</published>
    <updated>2016-07-16T16:13:15.815Z</updated>
    
    <content type="html">&lt;p&gt;#tinyhttpd-轻量级httpServer的源码实现&lt;/p&gt;
&lt;p&gt;tinyhttpd是一个超轻量型Http Server，使用C语言开发，全部代码只有500、600行，附带一个简单的Client，可以通过阅读这段代码理解一个Http Server的本质。&lt;/p&gt;
&lt;h2 id=&quot;httpd-c头文件函数声明&quot;&gt;&lt;a href=&quot;#httpd-c头文件函数声明&quot; class=&quot;headerlink&quot; title=&quot;httpd.c头文件函数声明&quot;&gt;&lt;/a&gt;httpd.c头文件函数声明&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accept_request&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bad_request&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, FILE *)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cannot_execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error_die&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execute_cgi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_line&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;not_found&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;serve_file&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(u_short *)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unimplemented&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每个函数的功能&lt;br&gt;void accept_request(void &lt;em&gt;);&lt;br&gt;接受客户端的请求，并对根据请求的类型做相应处理，主要针对get或者post方法解析参数&lt;br&gt;void bad_request(int);&lt;br&gt;利用send发送消息来告诉客户端其请求产生了什么问题&lt;br&gt;void cat(int, FILE &lt;/em&gt;);&lt;br&gt;将file文件的数据写入到socket&lt;br&gt;void cannot_execute(int);&lt;br&gt;告诉client这个CGI脚本不能运行&lt;br&gt;void error_die(const char &lt;em&gt;);&lt;br&gt;打印错误消息&lt;br&gt;void execute_cgi(int, const char &lt;/em&gt;, const char &lt;em&gt;, const char &lt;/em&gt;);&lt;br&gt;执行一个CGI程序，需要设定一些环境变量&lt;br&gt;int get_line(int, char *, int);&lt;/p&gt;
&lt;p&gt;void headers(int, const char &lt;em&gt;);&lt;br&gt;返回请求的HTTP头部，200表示请求成功&lt;br&gt;void not_found(int);&lt;br&gt;404网页未找到错误,定义一个404页面&lt;br&gt;void serve_file(int, const char &lt;/em&gt;);&lt;br&gt;发送一个常规文件给客户端&lt;br&gt;int startup(u_short *);&lt;br&gt;这个函数主要是在指定端口监听web连接，如果端口是0，动态分配个端口，修改原始端口为实际端口&lt;br&gt;void unimplemented(int);&lt;br&gt;如请求方法未实现，告知客户端未实现页面&lt;/p&gt;
&lt;h2 id=&quot;httpd-c实现详解&quot;&gt;&lt;a href=&quot;#httpd-c实现详解&quot; class=&quot;headerlink&quot; title=&quot;httpd.c实现详解&quot;&gt;&lt;/a&gt;httpd.c实现详解&lt;/h2&gt;&lt;p&gt;a.首先读取method字段看是get还是post&lt;br&gt;b.&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;133&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;134&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;135&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;136&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;137&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;138&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;139&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;140&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;141&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;142&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;143&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;144&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;145&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;146&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;147&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;148&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;149&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;150&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;151&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;152&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;153&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;154&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;155&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;156&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;157&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;158&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;159&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;160&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;161&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;162&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;163&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;164&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;165&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;166&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;167&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;168&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;169&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;170&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;171&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;173&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;174&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;175&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;176&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;177&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;178&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;179&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;180&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;181&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;182&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;183&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;184&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;185&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;186&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;187&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;188&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;189&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;190&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;191&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;192&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;193&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;194&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;195&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;196&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;197&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;198&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;199&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;200&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;201&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;202&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;203&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;204&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;205&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;206&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;207&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;208&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;209&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;210&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;211&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;212&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;213&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;214&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;215&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;216&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;217&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;218&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;219&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;220&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;221&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;222&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;223&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;224&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;225&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;226&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;227&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;228&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;229&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;230&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;231&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;232&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;233&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;234&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;235&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;236&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;237&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;238&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;239&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;240&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;241&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;242&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;243&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;244&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;245&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;246&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;247&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;248&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;249&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;250&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;251&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;252&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;253&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;254&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;255&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;256&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;257&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;258&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;259&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;260&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;261&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;262&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;263&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;264&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;265&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;266&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;267&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;268&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;269&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;270&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;271&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;272&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;273&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;274&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;275&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;276&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;277&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;278&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;279&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;280&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;281&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;282&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;283&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;284&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;285&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;286&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;287&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;288&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;289&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;290&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;291&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;292&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;293&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;294&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;295&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;296&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;297&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;298&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;299&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;300&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;301&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;302&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;303&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;304&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;305&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;306&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;307&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;308&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;309&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;310&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;311&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;312&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;313&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;314&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;315&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;316&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;317&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;318&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;319&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;320&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;321&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;322&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;323&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;324&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;325&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;326&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;327&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;328&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;329&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;330&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;331&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;332&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;333&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;334&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;335&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;336&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;337&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;338&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;339&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;340&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;341&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;342&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;343&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;344&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;345&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;346&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;347&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;348&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;349&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;350&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;351&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;352&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;353&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;354&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;355&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;356&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;357&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;358&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;359&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;360&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;361&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;362&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;363&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;364&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;365&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;366&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;367&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;368&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;369&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;370&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;371&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;372&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;373&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;374&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;375&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;376&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;377&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;378&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;379&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;380&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;381&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;382&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;383&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;384&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;385&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;386&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;387&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;388&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;389&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;390&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;391&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;392&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;393&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;394&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;395&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;396&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;397&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;398&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;399&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;400&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;401&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;402&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;403&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;404&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;405&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;406&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;407&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;408&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;409&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;410&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;411&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;412&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;413&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;414&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;415&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;416&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;417&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;418&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;419&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;420&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;421&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;422&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;423&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;424&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;425&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;426&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;427&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;428&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;429&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;430&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;431&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;432&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;433&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;434&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;435&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;436&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;437&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;438&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;439&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;440&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;441&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;442&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;443&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;444&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;445&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;446&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;447&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;448&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;449&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;450&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;451&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;452&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;453&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;454&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;455&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;456&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;457&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;458&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;459&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;460&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;461&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;462&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;463&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;464&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;465&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;466&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;467&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;468&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;469&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;470&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;471&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;472&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;473&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;474&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;475&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;476&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;477&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;478&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;479&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;480&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;481&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;482&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;483&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;484&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;485&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;486&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;487&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;488&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;489&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;490&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;491&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;492&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;493&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;494&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;495&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;496&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;497&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;498&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;499&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;500&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;501&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;502&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accept_request&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *client1)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; client = *(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *)client1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    pthread_detach(pthread_self());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numchars;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; method[&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; url[&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; path[&lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; i, j;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; stat st;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cgi = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;      &lt;span class=&quot;comment&quot;&gt;//如果服务器确定是CGI程序，则置为true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *query_string = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;accept_request is accept %d\n&quot;&lt;/span&gt;, client);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    numchars = get_line(client, buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;total get %d from client socket\n&quot;&lt;/span&gt;,numchars);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!ISspace(buf[j]) &amp;amp;&amp;amp; (i &amp;lt; &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(method) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        method[i] = buf[j];&lt;span class=&quot;comment&quot;&gt;//非空则读取BUFF，直到读到空或者读满了method&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        i++; j++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    method[i] = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strcasecmp(method, &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;) &amp;amp;&amp;amp; strcasecmp(method, &lt;span class=&quot;string&quot;&gt;&quot;POST&quot;&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;//strcasecmp是忽略大小写比较&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        unimplemented(client);&lt;span class=&quot;comment&quot;&gt;//如果既不是GET也不是POST返回未实现的错误&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strcasecmp(method, &lt;span class=&quot;string&quot;&gt;&quot;POST&quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//如果是POST方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cgi = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//开放执行CGI命令&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//过滤buf空字符&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (ISspace(buf[j]) &amp;amp;&amp;amp; (j &amp;lt; &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf)))j++; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!ISspace(buf[j]) &amp;amp;&amp;amp; (i &amp;lt; &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(url) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;amp;&amp;amp; (j &amp;lt; &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf)))&lt;span class=&quot;comment&quot;&gt;//读取url&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        url[i] = buf[j];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        i++; j++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url[i] = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strcasecmp(method, &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//如果是GET方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        query_string = url;             &lt;span class=&quot;comment&quot;&gt;//将url赋给查询字符串&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((*query_string != &lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;) &amp;amp;&amp;amp; (*query_string != &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;//读到？或者休止符停止&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        query_string++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*query_string == &lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//以问号结尾的话，需要给查询字符串赋休止符停止&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            cgi = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            *query_string = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            query_string++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(path, &lt;span class=&quot;string&quot;&gt;&quot;htdocs%s&quot;&lt;/span&gt;, url);&lt;span class=&quot;comment&quot;&gt;//确定相应的查询路径&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (path[&lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(path) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//最后一个是/的话&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;strcat&lt;/span&gt;(path, &lt;span class=&quot;string&quot;&gt;&quot;index.html&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//加上主页&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (stat(path, &amp;amp;st) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((numchars &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;, buf))  &lt;span class=&quot;comment&quot;&gt;/* read &amp;amp; discard headers */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            numchars = get_line(client, buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        not_found(client);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((st.st_mode &amp;amp; S_IFMT) == S_IFDIR)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;strcat&lt;/span&gt;(path, &lt;span class=&quot;string&quot;&gt;&quot;/index.html&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((st.st_mode &amp;amp; S_IXUSR) ||(st.st_mode &amp;amp; S_IXGRP) ||(st.st_mode &amp;amp; S_IXOTH)    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          cgi = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!cgi) serve_file(client, path);&lt;span class=&quot;comment&quot;&gt;//如果非cgi，提供网页文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; execute_cgi(client, path, method, query_string);&lt;span class=&quot;comment&quot;&gt;//根据查询字符提供CGI服务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(client1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    close(client);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//return NULL;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Inform the client that a request it has made has a problem.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Parameters: client socket */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*利用send来告诉客户端其请求产生了什么问题*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bad_request&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; client)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;HTTP/1.0 400 BAD REQUEST\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   send(client, buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;Content-type: text/html\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   send(client, buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   send(client, buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;P&amp;gt;Your browser sent a bad request, &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   send(client, buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;such as a POST without a Content-Length.\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   send(client, buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Put the entire contents of a file out on a socket.  This function&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * is named after the UNIX &quot;cat&quot; command, because it might have been&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * easier just to do something like pipe, fork, and exec(&quot;cat&quot;).&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Parameters: the client socket descriptor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *             FILE pointer for the file to cat */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/*将整个file文件的数据写入到socket*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; client, FILE *resource)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fgets(buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf), resource);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!feof(resource))&lt;span class=&quot;comment&quot;&gt;//是否已读到文件末尾&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//读一buf部分或者文件的一行数据(buf太大也是仅一行)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fgets(buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf), resource);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Inform the client that a CGI script could not be executed.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Parameter: the client socket descriptor. */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*告诉client这个CGI脚本不能运行*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cannot_execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; client)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;HTTP/1.0 500 Internal Server Error\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;Content-type: text/html\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;P&amp;gt;Error prohibited CGI execution.\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Print out an error message with perror() (for system errors; based&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * on value of errno, which indicates system call errors) and exit the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * program indicating an error. */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error_die&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *sc)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    perror(sc);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Execute a CGI script.  Will need to set environment variables as&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * appropriate.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Parameters: client socket descriptor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *             path to the CGI script */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/*执行一个CGI程序，需要设定一些环境变量*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execute_cgi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; client, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *path,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *method, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *query_string)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cgi_output[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cgi_input[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pid_t&lt;/span&gt; pid;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; status;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numchars = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; content_length = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    buf[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;; buf[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strcasecmp(method, &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((numchars &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;, buf))  &lt;span class=&quot;comment&quot;&gt;/* read &amp;amp; discard headers */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        numchars = get_line(client, buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;/* POST */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    numchars = get_line(client, buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((numchars &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;, buf))&lt;span class=&quot;comment&quot;&gt;//未读到换行符&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     buf[&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strcasecmp(buf, &lt;span class=&quot;string&quot;&gt;&quot;Content-Length:&quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//直到读到了相应的关键字&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      content_length = atoi(&amp;amp;(buf[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;]));&lt;span class=&quot;comment&quot;&gt;//读取相应的内容长度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     numchars = get_line(client, buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (content_length == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     bad_request(client);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;HTTP/1.0 200 OK\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    pipe（建立管道）：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    1) 头文件 #include&amp;lt;unistd.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    2) 定义函数： int pipe(int filedes[2]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    3) 函数说明： pipe()会建立管道，并将文件描述词由参数filedes数组返回。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                filedes[0]为管道里的读取端&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                filedes[1]则为管道的写入端。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    4) 返回值：  若成功则返回零，否则返回-1，错误原因存于errno中。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      错误代码: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           EMFILE 进程已用完文件描述词最大量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           ENFILE 系统已无文件描述词可用。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           EFAULT 参数 filedes 数组地址不合法。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pipe(cgi_output) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//父子进程使用管道通信&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cannot_execute(client);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pipe(cgi_input) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//建立输入输出管道&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cannot_execute(client);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( (pid = fork()) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//fork出错了&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cannot_execute(client);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pid == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;/* 子进程child: CGI script */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; meth_env[&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; query_env[&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; length_env[&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dup2(cgi_output[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 输出重定向&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dup2(cgi_input[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//输入重定向&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    close(cgi_output[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;span class=&quot;comment&quot;&gt;//提前关闭这两个子进程没用到的管道&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    close(cgi_input[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(meth_env, &lt;span class=&quot;string&quot;&gt;&quot;REQUEST_METHOD=%s&quot;&lt;/span&gt;, method);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    putenv(meth_env);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strcasecmp(method, &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(query_env, &lt;span class=&quot;string&quot;&gt;&quot;QUERY_STRING=%s&quot;&lt;/span&gt;, query_string);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     putenv(query_env);&lt;span class=&quot;comment&quot;&gt;//设定环境变量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;   &lt;span class=&quot;comment&quot;&gt;/* POST */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(length_env, &lt;span class=&quot;string&quot;&gt;&quot;CONTENT_LENGTH=%d&quot;&lt;/span&gt;, content_length);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     putenv(length_env);&lt;span class=&quot;comment&quot;&gt;//设定环境变量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    execl(path, path, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//执行path路径下的path命令,null是参数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;    &lt;span class=&quot;comment&quot;&gt;/*父进程 parent */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    close(cgi_output[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;span class=&quot;comment&quot;&gt;//提前关闭这两个父进程没用到的管道&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    close(cgi_input[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strcasecmp(method, &lt;span class=&quot;string&quot;&gt;&quot;POST&quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//处理POST&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; content_length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      recv(client, &amp;amp;c, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//从client接收数据从内核拷贝至c&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      write(cgi_input[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &amp;amp;c, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (read(cgi_output[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &amp;amp;c, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//从输出里读取到c发送给client&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     send(client, &amp;amp;c, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    close(cgi_output[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    close(cgi_input[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    waitpid(pid, &amp;amp;status, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//返回子进程结束状态值。 子进程的结束状态值会由参数 status 返回,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Get a line from a socket, whether the line ends in a newline,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * carriage return, or a CRLF combination.  Terminates the string read&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * with a null character.  If no newline indicator is found before the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * end of the buffer, the string is terminated with a null.  If any of&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * the above three line terminators is read, the last character of the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * string will be a linefeed and the string will be terminated with a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * null character.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Parameters: the socket descriptor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *             the buffer to save the data in&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *             the size of the buffer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Returns: the number of bytes stored (excluding null) */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*从socket读取一行，无论是回车，换行还是回车换行，读到一个空结束&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*如果在buffer的末尾之前读到换行符，字符串空结束&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*int recv( _In_ SOCKET s, _Out_ char *buf, _In_ int len(buf长度), _In_ int flags（指定调用方式）);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;成功执行时，返回接收到的字节数。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;另一端已关闭则返回0。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;失败返回-1，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_line&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sock, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *buf, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;,size);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//int ntimeout = 1000;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval timeout = &amp;#123;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; setsockopt(sock,SOL_SOCKET,SO_RCVTIMEO,(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&amp;amp;timeout,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((i &amp;lt; size - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;amp;&amp;amp; (c != &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//recv函数在建立连接后把接收的数据copy到buf中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  n = recv(sock, &amp;amp;c, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//注意如果恰好此时sock中没有数据，那么将阻塞于此&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* DEBUG printf(&quot;%02X\n&quot;, c); */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;1 %c\n &quot;&lt;/span&gt;, c);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The recv get %d\n &quot;&lt;/span&gt;, n);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;string&quot;&gt;&#39;\r&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    n = recv(sock, &amp;amp;c, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, MSG_PEEK);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* DEBUG printf(&quot;%02X\n&quot;, c); */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;2 %c\n&quot;&lt;/span&gt;, c); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((n &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (c == &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     recv(sock, &amp;amp;c, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     c = &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   buf[i] = c;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   i++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   c = &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; buf[i] = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;get_line return %d\n&quot;&lt;/span&gt;,i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(i);&lt;span class=&quot;comment&quot;&gt;//接收的数据并返回copy到buf的数据长度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Return the informational HTTP headers about a file. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Parameters: the socket to print the headers on&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *             the name of the file */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*返回请求的HTTP头部，200表示请求成功*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; client, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *filename)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)filename;  &lt;span class=&quot;comment&quot;&gt;/* could use filename to determine file type */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;strcpy&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;HTTP/1.0 200 OK\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;strcpy&lt;/span&gt;(buf, SERVER_STRING);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;Content-Type: text/html\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;strcpy&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Give a client a 404 not found status message. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*404网页未找到错误*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;not_found&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; client)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;HTTP/1.0 404 NOT FOUND\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, SERVER_STRING);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;Content-Type: text/html\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;HTML&amp;gt;&amp;lt;TITLE&amp;gt;Not Found&amp;lt;/TITLE&amp;gt;\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;BODY&amp;gt;&amp;lt;P&amp;gt;The server could not fulfill\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;your request because the resource specified\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;is unavailable or nonexistent.\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Send a regular file to the client.  Use headers, and report&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * errors to client if they occur.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Parameters: a pointer to a file structure produced from the socket&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *              file descriptor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *             the name of the file to serve */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/*发送一个常规文件给客户端*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;serve_file&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; client, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *filename)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; FILE *resource = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numchars = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; buf[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;; buf[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((numchars &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;, buf))  &lt;span class=&quot;comment&quot;&gt;/* read &amp;amp; discard headers ？？干嘛的？*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  numchars = get_line(client, buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; resource = fopen(filename, &lt;span class=&quot;string&quot;&gt;&quot;r&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//读取文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (resource == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  not_found(client);&lt;span class=&quot;comment&quot;&gt;//告诉client请求的文件未找到&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  headers(client, filename);&lt;span class=&quot;comment&quot;&gt;//将头部发给client&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  cat(client, resource);&lt;span class=&quot;comment&quot;&gt;//提取文件内容发送到client&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; fclose(resource);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* This function starts the process of listening for web connections&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * on a specified port.  If the port is 0, then dynamically allocate a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * port and modify the original port variable to reflect the actual&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * port.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Parameters: pointer to variable containing the port to connect on&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Returns: the socket */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/*这个函数主要是监听指定端口的web连接，如果端口是0，动态分配个端口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 修改原始端口为实际端口 */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(u_short *port)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; httpd = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; httpd = socket(PF_INET, SOCK_STREAM, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//创建套接口描述字&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (httpd == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  error_die(&lt;span class=&quot;string&quot;&gt;&quot;socket&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(&amp;amp;name, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(name));&lt;span class=&quot;comment&quot;&gt;//全置为0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; name.sin_family = AF_INET;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; name.sin_port = htons(*port);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; name.sin_addr.s_addr = htonl(INADDR_ANY);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (bind(httpd, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;name, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(name)) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//将本地协议地址赋给套接口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  error_die(&lt;span class=&quot;string&quot;&gt;&quot;bind&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*port == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;/* if dynamically allocating a port 如果端口为0动态分配*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;socklen_t&lt;/span&gt; namelen = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getsockname(httpd, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;name, &amp;amp;namelen) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   error_die(&lt;span class=&quot;string&quot;&gt;&quot;getsockname&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  *port = ntohs(name.sin_port);&lt;span class=&quot;comment&quot;&gt;//网络字节序转为主机字节序&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (listen(httpd, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//转换为被动套接口并规定套接口排队的最大连接个数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  error_die(&lt;span class=&quot;string&quot;&gt;&quot;listen&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(httpd);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Inform the client that the requested web method has not been&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * implemented.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Parameter: the client socket */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unimplemented&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; client)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;HTTP/1.0 501 Method Not Implemented\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, SERVER_STRING);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;Content-Type: text/html\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;TITLE&amp;gt;Method Not Implemented\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;BODY&amp;gt;&amp;lt;P&amp;gt;HTTP request method not supported.\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;\r\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; send(client, buf, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(buf), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**********************************************************************/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; server_sock = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; u_short port = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//int client_sock = -1;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in client_name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;socklen_t&lt;/span&gt; client_name_len = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(client_name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;pthread_t&lt;/span&gt; newthread;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; server_sock = startup(&amp;amp;port);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;httpd running on port %d\n&quot;&lt;/span&gt;, port);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *client_sock;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/*若果accept成功返回一个内核自而动生成的一个全新的描述字，代表与所返回的客户的TCP连接*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;now client_sock is %d\n&quot;&lt;/span&gt;,*client_sock);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  client_sock = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  *client_sock = accept(server_sock,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                       (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;client_name,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                       &amp;amp;client_name_len);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;current socket is %d\n&quot;&lt;/span&gt;,*client_sock);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*client_sock == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       error_die(&lt;span class=&quot;string&quot;&gt;&quot;accept&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/* accept_request(client_sock); */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/*pthread_create第一个参数为指向线程标识符的指针。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第二个参数用来设置线程属性。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第三个参数是线程运行函数的起始地址。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;最后一个参数是运行函数的参数*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *acceptfunc = &amp;amp;accept_request;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *clientsock = client_sock; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pthread_create(&amp;amp;newthread , &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, acceptfunc, clientsock) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   perror(&lt;span class=&quot;string&quot;&gt;&quot;pthread_create&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; close(server_sock);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;simpleclient-c实现&quot;&gt;&lt;a href=&quot;#simpleclient-c实现&quot; class=&quot;headerlink&quot; title=&quot;simpleclient.c实现&quot;&gt;&lt;/a&gt;simpleclient.c实现&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in address;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; ch = &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	sockfd = socket(AF_INET, SOCK_STREAM, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	address.sin_family = AF_INET;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	address.sin_addr.s_addr = inet_addr(&lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	address.sin_port = htons(&lt;span class=&quot;number&quot;&gt;9734&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	len = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(address);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	result = connect(sockfd, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;address, len);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		perror(&lt;span class=&quot;string&quot;&gt;&quot;oops: client1&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	write(sockfd, &amp;amp;ch, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	read(sockfd, &amp;amp;ch, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;char from server = %c\n&quot;&lt;/span&gt;, ch);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	close(sockfd);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;详细参看我的github&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#tinyhttpd-轻量级httpServer的源码实现&lt;/p&gt;
&lt;p&gt;tinyhttpd是一个超轻量型Http Server，使用C语言开发，全部代码只有500、600行，附带一个简单的Client，可以通过阅读这段代码理解一个Http Server的本质。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="C++与linux网络编程" scheme="http://yoursite.com/categories/C-%E4%B8%8Elinux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>redis中dict实现以及常用的哈希方法</title>
    <link href="http://yoursite.com/2016/04/09/redis%E4%B8%ADdict%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E5%93%88%E5%B8%8C%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/04/09/redis中dict实现以及常用的哈希方法/</id>
    <published>2016-04-08T16:38:59.000Z</published>
    <updated>2016-07-16T15:17:54.761Z</updated>
    
    <content type="html">&lt;h2 id=&quot;redis中dict解析&quot;&gt;&lt;a href=&quot;#redis中dict解析&quot; class=&quot;headerlink&quot; title=&quot;redis中dict解析&quot;&gt;&lt;/a&gt;redis中dict解析&lt;/h2&gt;&lt;p&gt; 最近看了redis的源码的基本数据结构部分，redis中dict能够根据key快速查找其value，用哈希实现，解决冲突用拉链法，将所有关键字为同义词的结点链接在同一个单链表中，以下是dict的实现结构图&lt;br&gt;&lt;img src=&quot;http://pic002.cnblogs.com/images/2011/81339/2011052111471677.png&quot; alt=&quot;file-list&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;dict源码定义&quot;&gt;&lt;a href=&quot;#dict源码定义&quot; class=&quot;headerlink&quot; title=&quot;dict源码定义&quot;&gt;&lt;/a&gt;dict源码定义&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dictEntry &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; u64;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int64_t&lt;/span&gt; s64;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; d;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; v;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dictEntry *next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; dictEntry;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dictType &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(*hashFunction)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *(*keyDup)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *privdata, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *(*valDup)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *privdata, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *obj);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*keyCompare)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *privdata, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key1, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*keyDestructor)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *privdata, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*valDestructor)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *privdata, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *obj);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; dictType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dictht &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dictEntry **table;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; size;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; sizemask;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; used;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; dictht;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dict &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dictType *type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *privdata;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dictht ht[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; rehashidx; &lt;span class=&quot;comment&quot;&gt;/* rehashing not in progress if rehashidx == -1 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; iterators; &lt;span class=&quot;comment&quot;&gt;/* number of iterators currently running */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; dict;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dictIterator &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dict *d;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; index;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; table, safe;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dictEntry *entry, *nextEntry;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* unsafe iterator fingerprint for misuse detection. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; fingerprint;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; dictIterator;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;实现的哈希方法汇总&quot;&gt;&lt;a href=&quot;#实现的哈希方法汇总&quot; class=&quot;headerlink&quot; title=&quot;实现的哈希方法汇总&quot;&gt;&lt;/a&gt;实现的哈希方法汇总&lt;/h2&gt;&lt;p&gt;dict实现里出现了这么一些哈希方法&lt;br&gt;Thoms wang 提到一个好的哈希函数应该具备以下两点:&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt;哈希函数是可逆的即，对于哈希函数输入值x和输出值y，如果存在f(x) = y，就一定存在g(y) = x。说白了，就是哈希函数可以将某一个值x转换成一个key，也可以把这个key还原回成x&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;strong&gt;哈希函数一个好的哈希函数应该容易造成雪崩效应。这里的雪崩效应是从比特位的角度出发的，它指的是，输入值1bit位的变化会造成输出值1/2的bit位发生变化。&lt;/strong&gt;&lt;br&gt;dic里主要出现了一下哈希方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;32 bit MixFunction&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;64 bit Mix Functions&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;MurmurHash2&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;djb hash&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们来看看源码：&lt;br&gt;a. &lt;strong&gt;32 bit MixFunction&lt;/strong&gt;&lt;br&gt;主要操作都是加法和移位操作的混合，加减，抑或都是可逆的操作&lt;br&gt;抑或也可以使得哈希数据分布均匀，这里有个关于为何使用抑或的解释&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5889238/why-is-xor-the-default-way-to-combine-hashes，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/5889238/why-is-xor-the-default-way-to-combine-hashes，&lt;/a&gt;&lt;br&gt;至于为何是以下操作的组合效果，估计作者也是进行了大量实验的&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Thomas Wang&#39;s 32 bit Mix Function */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dictIntHashFunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    key += ~(key &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    key ^=  (key &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    key +=  (key &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    key ^=  (key &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    key += ~(key &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    key ^=  (key &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; key;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;b. &lt;strong&gt;64 bit Mix Functions&lt;/strong&gt;&lt;br&gt;用来生成一个字典在给定时间的指纹，当迭代器初始化和释放的时候检查时候检查其哈希指纹，若不一样说明用户进行了非法操作&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* A fingerprint is a 64 bit number that represents the state of the dictionary&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * at a given time, it&#39;s just a few dict properties xored together.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * When an unsafe iterator is initialized, we get the dict fingerprint, and check&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * the fingerprint again when the iterator is released.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * If the two fingerprints are different it means that the user of the iterator&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * performed forbidden operations against the dictionary while iterating. */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dictFingerprint&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dict *d)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; integers[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;], hash = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    integers[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;) d-&amp;gt;ht[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].table;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    integers[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = d-&amp;gt;ht[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].size;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    integers[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = d-&amp;gt;ht[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].used;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    integers[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;) d-&amp;gt;ht[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].table;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    integers[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] = d-&amp;gt;ht[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].size;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    integers[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] = d-&amp;gt;ht[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].used;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* We hash N integers by summing every successive integer with the integer&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * hashing of the previous sum. Basically:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Result = hash(hash(hash(int1)+int2)+int3) ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * This way the same set of integers in a different order will (likely) hash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * to a different number. */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;; j++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hash += integers[j];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* For the hashing step we use Tomas Wang&#39;s 64 bit integer hash. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hash = (~hash) + (hash &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// hash = (hash &amp;lt;&amp;lt; 21) - hash - 1;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hash = hash ^ (hash &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hash = (hash + (hash &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) + (hash &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// hash * 265&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hash = hash ^ (hash &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hash = (hash + (hash &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)) + (hash &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// hash * 21&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hash = hash ^ (hash &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hash = hash + (hash &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hash;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;c. &lt;strong&gt;MurmurHash2&lt;/strong&gt;&lt;br&gt;MurmurHash是一种很出名的非加密型哈希函数，适用于一般的哈希检索操作。目前有三个版本（MurmurHash1、MurmurHash2、MurmurHash3）。最新的是MurmurHash3，可以产生出32-bit或128-bit哈希值。redis中应用的是MurmurHash2，能产生32-bit或64-bit哈希值&lt;br&gt;每次取4个字节&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* MurmurHash2, by Austin Appleby&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Note - This code makes a few assumptions about how your machine behaves -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 1. We can read a 4-byte value from any address without crashing&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 2. sizeof(int) == 4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * And it has a few limitations -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 1. It will not work incrementally.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 2. It will not produce the same results on little-endian and big-endian&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *    machines.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dictGenHashFunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* &#39;m&#39; and &#39;r&#39; are mixing constants generated offline.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     They&#39;re not really &#39;magic&#39;, they just happen to work well.  */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; seed = dict_hash_function_seed;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; m = &lt;span class=&quot;number&quot;&gt;0x5bd1e995&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r = &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Initialize the hash to a &#39;random&#39; value */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; h = seed ^ len;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Mix 4 bytes at a time into the hash */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *data = (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)key;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(len &amp;gt;= &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; k = *(&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;*)data;&lt;span class=&quot;comment&quot;&gt;//每次取4个字节，看成一个uint32&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        k *= m;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        k ^= k &amp;gt;&amp;gt; r;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        k *= m;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        h *= m;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        h ^= k;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        data += &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        len -= &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Handle the last few bytes of the input array  */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(len) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;: h ^= data[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: h ^= data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: h ^= data[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; h *= m;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Do a few final mixes of the hash to ensure the last few&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * bytes are well-incorporated. */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    h ^= h &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    h *= m;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    h ^= h &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)h;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;``` &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d. **djb hash**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;俗称的time33方法，每次hash乘以&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;，hash*&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt; = hash&amp;lt;&amp;lt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;+hash,乘法除法用移位快&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;``` C&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//static uint32_t dict_hash_function_seed = 5381;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* And a case insensitive hash function (based on djb hash) */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dictGenCaseHashFunction(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *buf, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hash = (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)dict_hash_function_seed;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (len--)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hash = ((hash &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + hash) + (&lt;span class=&quot;built_in&quot;&gt;tolower&lt;/span&gt;(*buf++)); &lt;span class=&quot;comment&quot;&gt;/* hash * 33 + c */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hash;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;顺便看个神奇位翻转方法&quot;&gt;&lt;a href=&quot;#顺便看个神奇位翻转方法&quot; class=&quot;headerlink&quot; title=&quot;顺便看个神奇位翻转方法&quot;&gt;&lt;/a&gt;顺便看个神奇位翻转方法&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; s = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(v); &lt;span class=&quot;comment&quot;&gt;// bit size; must be power of 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; mask = ~&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((s &amp;gt;&amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mask ^= (mask &amp;lt;&amp;lt; s);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        v = ((v &amp;gt;&amp;gt; s) &amp;amp; mask) | ((v &amp;lt;&amp;lt; s) &amp;amp; ~mask);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;十进制14&lt;br&gt;0000 0000 0000 0000 0000 0000 0000 1110&lt;br&gt;翻转后十进制1879048902&lt;br&gt;0111 0000 0000 0000 0000 0000 0000 0000&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;redis中dict解析&quot;&gt;&lt;a href=&quot;#redis中dict解析&quot; class=&quot;headerlink&quot; title=&quot;redis中dict解析&quot;&gt;&lt;/a&gt;redis中dict解析&lt;/h2&gt;&lt;p&gt; 最近看了redis的源码的基本数据结构部分，redis中d
    
    </summary>
    
      <category term="Data structure and Algorithm" scheme="http://yoursite.com/categories/Data-structure-and-Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo修改样式</title>
    <link href="http://yoursite.com/2016/03/29/hexo%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/03/29/hexo修改样式/</id>
    <published>2016-03-29T07:41:56.000Z</published>
    <updated>2016-08-07T16:15:58.941Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;自从搭建博客之后，发现样式还不是自己最满意的，于是重新进行了修改，修改了文章页&lt;br&gt;宽度等，对齐了侧栏，修改了代码框显示在不同浏览器样式不一致问题，之前除了chrome以外，代码周边出现难看的滚动条，发现了插入图片功能，:),作为一位程序员，就得自己改造才舒服，就像自己代码改造latex简历一样.&lt;/p&gt;
&lt;h2 id=&quot;修改宽度&quot;&gt;&lt;a href=&quot;#修改宽度&quot; class=&quot;headerlink&quot; title=&quot;修改宽度&quot;&gt;&lt;/a&gt;修改宽度&lt;/h2&gt;&lt;p&gt;\hexo\themes\next\source\css_variable\下文件&lt;br&gt;查看代码自定义博客页面的各模块大小颜色位置等，修改即可&lt;/p&gt;
&lt;h2 id=&quot;修改代码框样式&quot;&gt;&lt;a href=&quot;#修改代码框样式&quot; class=&quot;headerlink&quot; title=&quot;修改代码框样式&quot;&gt;&lt;/a&gt;修改代码框样式&lt;/h2&gt;&lt;p&gt;\hexo\themes\next\source\css_common\components\highlight\highlight.styl theme.styl&lt;br&gt;浏览器调试修改css文件，查看样式，同时修改上述文件css定义&lt;/p&gt;
&lt;h2 id=&quot;插入图片&quot;&gt;&lt;a href=&quot;#插入图片&quot; class=&quot;headerlink&quot; title=&quot;插入图片&quot;&gt;&lt;/a&gt;插入图片&lt;/h2&gt;&lt;p&gt;对于hexo，有两种方式：&lt;br&gt;使用本地路径：在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。 &lt;/p&gt;
&lt;h3 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h3&gt;&lt;p&gt;如何制作漂亮的简历个性化修改latex代码，可以参看我的csdn博客：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/justdoithai/article/category/6186790&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/justdoithai/article/category/6186790&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/justdoithai/article/details/51206465&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/justdoithai/article/details/51206465&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/justdoithai/article/details/51627064&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/justdoithai/article/details/51627064&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/justdoithai/article/details/51627423&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/justdoithai/article/details/51627423&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;自从搭建博客之后，发现样式还不是自己最满意的，于是重新进行了修改，修改了文章页&lt;br&gt;宽度等，对齐了侧栏，修改了代码框显示在不同浏览器样式不
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>WordSeg-朴素贝叶斯分词</title>
    <link href="http://yoursite.com/2016/03/23/Word_seg%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E8%AF%8D/"/>
    <id>http://yoursite.com/2016/03/23/Word_seg朴素贝叶斯分词/</id>
    <published>2016-03-22T16:38:59.000Z</published>
    <updated>2016-07-18T00:20:31.614Z</updated>
    
    <content type="html">&lt;h2 id=&quot;小程序注解&quot;&gt;&lt;a href=&quot;#小程序注解&quot; class=&quot;headerlink&quot; title=&quot;小程序注解&quot;&gt;&lt;/a&gt;小程序注解&lt;/h2&gt;&lt;p&gt;以下是相应的Python代码&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#朴素贝叶斯分词(含义是分词后，得分的假设是基于两词之间是独立的，后词的出现与前词无关)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# p[i][n]表示从i到n的句子的最佳划分的得分,我们用dp表达式p[i][n]=max(freq(s[i:k])+p[k][n])&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 依次求出长度为1,2,3,n的句子划分，那么p[0][n]便是最佳划分结果,用t[i]表示产生的最佳划分每次向前走几个字符&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; math&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: float(&lt;span class=&quot;string&quot;&gt;&#39;-inf&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; math.log(x) &lt;span class=&quot;comment&quot;&gt;#匿名函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;prob = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: d[x] &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; d &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(x)&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(filename=&lt;span class=&quot;string&quot;&gt;&#39;SogouLabDic.dic&#39;&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    d[&lt;span class=&quot;string&quot;&gt;&#39;_N_&#39;&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(filename, &lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;,encoding=&lt;span class=&quot;string&quot;&gt;&#39;gb18030&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; handle:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; handle:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;#print(line)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            word, freq = line.split(&lt;span class=&quot;string&quot;&gt;&#39;\t&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;#取list的前2个元素,词和相应的词数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            d[&lt;span class=&quot;string&quot;&gt;&#39;_N_&#39;&lt;/span&gt;] += int(freq)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;             &lt;span class=&quot;comment&quot;&gt;# 此表的词频总和,每个词数都加1    &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;#print(&#39;utf&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                d[word.decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;)] = int(freq)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#词数加1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;#print(&#39;gbk&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    d[word] = int(freq)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;#词数加1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    print(word)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    l = len(s)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    p = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(l+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)] &lt;span class=&quot;comment&quot;&gt;#1,2,...,l位置为0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    t = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(l)]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 如&#39;大床房多少钱&#39;，当前位置到末尾分别为1,2,...l长度的词，t[i]保留从当前位置向前划分的最佳长度，比如从&#39;大&#39;开始，&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#大床最佳，或大床房最佳，取决词库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(l&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;): &lt;span class=&quot;comment&quot;&gt;#start,stop，step&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# prob(s[i:i+k])/d[&#39;_t_&#39;]为词表词频度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        p[i], t[i] = max((prob(s[i:i+k])/d[&lt;span class=&quot;string&quot;&gt;&#39;_N_&#39;&lt;/span&gt;]+p[i+k], k)&lt;span class=&quot;comment&quot;&gt;#在一个二元组列表里返回第一个元素最大的二元组,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                         &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, l-i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dis = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; dis&amp;lt;l:  &lt;span class=&quot;comment&quot;&gt;#dis=0,不断向前遍历分割词汇&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; s[dis:dis+t[dis]]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dis += t[dis]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    init()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    st=&lt;span class=&quot;string&quot;&gt;&#39;百度是全球最大的中文搜索引擎、最大的中文网站&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    print(len(st))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    lpp=list(solve(st))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; o &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(lpp)):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(lpp[o])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;.join(list(solve(st))))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;结果&quot;&gt;&lt;a href=&quot;#结果&quot; class=&quot;headerlink&quot; title=&quot;结果&quot;&gt;&lt;/a&gt;结果&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;百度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;是&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;全球&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;最大&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;中文&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;搜索&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;引擎&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;、&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;最大&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;中文&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;网站&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;本实现基于朴素的贝叶斯思想，分词效果具有局限性，想要更精准的分词需要更大的词典以及更加好的&lt;br&gt;开源代码，如jieba等,推荐一个优秀的开源实现 &lt;a href=&quot;https://github.com/yanyiwu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yanyiwu&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;词典下载&quot;&gt;&lt;a href=&quot;#词典下载&quot; class=&quot;headerlink&quot; title=&quot;词典下载&quot;&gt;&lt;/a&gt;词典下载&lt;/h2&gt;&lt;p&gt;如若要运行该Python代码，需要搜狗实验室词典SogouLabDic.dic，可到我的github进行下载，仅当学习用还是不错我的，觉得不错可给star&lt;/p&gt;
&lt;p&gt;我的github:&lt;a href=&quot;https://github.com/xiegonghai&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/xiegonghai&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小程序注解&quot;&gt;&lt;a href=&quot;#小程序注解&quot; class=&quot;headerlink&quot; title=&quot;小程序注解&quot;&gt;&lt;/a&gt;小程序注解&lt;/h2&gt;&lt;p&gt;以下是相应的Python代码&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;
    
    </summary>
    
      <category term="Data structure and Algorithm" scheme="http://yoursite.com/categories/Data-structure-and-Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>dp-深入理解动态规划</title>
    <link href="http://yoursite.com/2016/03/10/Dp--%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2016/03/10/Dp--深入理解动态规划/</id>
    <published>2016-03-10T08:41:59.000Z</published>
    <updated>2016-07-16T10:38:38.024Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;   通过最近对于一些算法题的思考，越来越发现动态规划方法的在时间上高效性，往往该问题可以轻松的找到暴力破解的方法，其时间复杂度却不尽人意。下面来看看几个常见的动态规划思路的经典问题&lt;/p&gt;
&lt;h3 id=&quot;实例探讨&quot;&gt;&lt;a href=&quot;#实例探讨&quot; class=&quot;headerlink&quot; title=&quot;实例探讨&quot;&gt;&lt;/a&gt;实例探讨&lt;/h3&gt;&lt;p&gt;例一.有一段楼梯有10级台阶，规定每一步只能跨一级或两级，要登上第10级台阶有几种不同的走法?（腾讯电面题之一）&lt;br&gt;    其状态转移方程为：&lt;/p&gt;
&lt;p&gt;$$f(n):表示n阶楼梯有多少种走法$$$$ f(n) =f(n-1)+f(n-2)$$$$f(1)=1,f(2)=2$$&lt;/p&gt;
&lt;p&gt;例二：01背包问题&lt;br&gt;有n个重量和价值分别为vector&lt;int&gt; weight, vector&lt;int&gt; value的物品；背包最大负重为W，求能用背包装下的物品的最大价值？&lt;br&gt;输入：n =4&lt;br&gt;weight=2, 1, 3, 2&lt;br&gt;value =3, 2, 4, 2&lt;br&gt;W=5&lt;br&gt;输出=7&lt;br&gt;$$dp[i][j]表示前i号物品中能选出重量在j之内的最大价值$$$$dp[i][j] = max(dp[i-1][j] , dp[i-1][j-w[i]] + v[i]);$$&lt;br&gt;例三：最大连续子序列和&lt;br&gt;如给定数组[-2,1,-3,4,-1,2,1,-5,4]&lt;br&gt;连续的子数组为[4,-1,2,1]有最大和6&lt;br&gt;$$f(j+1)为以下标j结尾的连续子序列和的最大值$$$$f(j+1)=max(f(j)+A[j],A[j])$$$$target = max{f[j]}$$&lt;br&gt;思考：最大连续子序列乘积&lt;br&gt;如给定数组[-2,1,-3,4,-1,2,1,-5,4]&lt;br&gt;连续的子数组为[4,-1,2,1]有最大和6&lt;br&gt;$$f(j+1)为以下标j结尾的连续子序列最大乘积值（1）$$&lt;br&gt;状态转移方程如何表示呢：&lt;br&gt;这里我们知道A[j]可能为正数(或0)或负数，那么当A[j]为正数，期望前j个乘积为正数，若为负数，则期望前面的为负数。故我们需定义两个函数来确定我们的状态转移方程：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fmax(j+1)=max( max(fmax(j)*A[j],A[j]),fmin(j)*A[j])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/int&gt;&lt;/int&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fmin(j+1)=min(min(fmin(j)*A[j],A[j]),fmax(j)*A[j])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;1.通过以上动态问题问题的分析，可以看出&lt;strong&gt;最重要的是定义好相应的问题，然后写出状态转移方程&lt;/strong&gt;，往往这也是整个问题求解最能考察你分析能力的过程。能够用动态规划求解的问题有两类性质：&lt;br&gt;a.重叠子问题&lt;/p&gt;
&lt;p&gt; 采用递推方式，比如上例要求出10阶楼梯走法，那么最后一步是踏一步上来或者踏2步上来，最后转化为相应的子问题，子问题深入求解就包含了重叠的子问题，所以自顶向下的实现并不高效，常采用备忘录方式保存子问题的最优解，自底向上更高效。&lt;/p&gt;
&lt;p&gt;b.最优子结构：&lt;br&gt; 往往子问题的最优解可以推出原问题的最优解&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;   通过最近对于一些算法题的思考，越来越发现动态规划方法的在时间上高效性，往往该问题可以轻松的找到暴力破解的方法，其时间复杂度却不尽人意。
    
    </summary>
    
      <category term="Data structure and Algorithm" scheme="http://yoursite.com/categories/Data-structure-and-Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="http://yoursite.com/2016/03/01/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/03/01/hexo博客搭建/</id>
    <published>2016-03-01T07:41:56.000Z</published>
    <updated>2016-08-07T16:16:11.486Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近来想着搭建一个基于github的博客站点,之前在csdn的博客频繁性恶心弹窗广告，后面虽说装adblock自己是看不到了，但别人浏览还是会有的，大概了解了下，比较好的博客模板有octopress,wordpress,hexo几种，octopress还不错，开始搭建之后，由于版本更新匹配的原因，总是会有小错误，加之对ruby不熟，于是切换到hexo来搭建&lt;/p&gt;
&lt;h2 id=&quot;搭建教程&quot;&gt;&lt;a href=&quot;#搭建教程&quot; class=&quot;headerlink&quot; title=&quot;搭建教程&quot;&gt;&lt;/a&gt;搭建教程&lt;/h2&gt;&lt;p&gt;主要参考&lt;a href=&quot;http://www.mashiro.io/2015/09/hexo-guide-2/，写的很详细，就不重复&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mashiro.io/2015/09/hexo-guide-2/，写的很详细，就不重复&lt;/a&gt; 造轮子了，仔细看完ok了&lt;/p&gt;
&lt;h3 id=&quot;安装Git&quot;&gt;&lt;a href=&quot;#安装Git&quot; class=&quot;headerlink&quot; title=&quot;安装Git&quot;&gt;&lt;/a&gt;安装Git&lt;/h3&gt;&lt;p&gt;去 Git 官网下载并安装即可.&lt;/p&gt;
&lt;h3 id=&quot;安装Node-Js&quot;&gt;&lt;a href=&quot;#安装Node-Js&quot; class=&quot;headerlink&quot; title=&quot;安装Node.Js&quot;&gt;&lt;/a&gt;安装Node.Js&lt;/h3&gt;&lt;p&gt;去NodeJs 官网下载并安装即可.&lt;br&gt;注意: 尽量使用默认路径, 以保证环境变量的自动配置.&lt;/p&gt;
&lt;h3 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h3&gt;&lt;p&gt;使用npm命令即可直接安装 (可以直接在屏幕任意地方直接右键: Git Bash Here)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install -g hexo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;静静等待安装完毕即可.&lt;/p&gt;
&lt;h3 id=&quot;创建Hexo目录&quot;&gt;&lt;a href=&quot;#创建Hexo目录&quot; class=&quot;headerlink&quot; title=&quot;创建Hexo目录&quot;&gt;&lt;/a&gt;创建Hexo目录&lt;/h3&gt;&lt;p&gt;目录可以再随意地方创建 (注:尽量全英文路径 避免不必要的问题)&lt;br&gt;EG: C:\Users\Xuning\Documents\Hexo (这是我的本地路径)&lt;br&gt;现在进入Hexo目录内在里面右键选择: Git Bash Here&lt;/p&gt;
&lt;p&gt;Hexo 会自动生成建站所需要的文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;npm 会自动安装依赖环境&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h3&gt;&lt;p&gt;Hexo 运行方法很简单只需要一条命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;打开浏览器访问 &lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt; 看看效果吧 如下所示&lt;/p&gt;
&lt;h2 id=&quot;配置主题以及额外功能&quot;&gt;&lt;a href=&quot;#配置主题以及额外功能&quot; class=&quot;headerlink&quot; title=&quot;配置主题以及额外功能&quot;&gt;&lt;/a&gt;配置主题以及额外功能&lt;/h2&gt;&lt;p&gt;可从此看到一些常用主题的介绍&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/24422335&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/24422335&lt;/a&gt;&lt;br&gt;next主题配置：&lt;br&gt;&lt;a href=&quot;http://theme-next.iissnan.com/theme-settings.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://theme-next.iissnan.com/theme-settings.html&lt;/a&gt;&lt;br&gt;分类和标签&lt;br&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/front-matter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/zh-cn/docs/front-matter.html&lt;/a&gt;&lt;br&gt;hexo and github详细教程&lt;br&gt;&lt;a href=&quot;http://www.mashiro.io/2015/09/hexo-guide-5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mashiro.io/2015/09/hexo-guide-5/&lt;/a&gt;&lt;br&gt;评论搭建&lt;br&gt;&lt;a href=&quot;http://www.arao.me/2015/hexo-next-theme-optimize-base/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.arao.me/2015/hexo-next-theme-optimize-base/&lt;/a&gt;&lt;br&gt;常见问题&lt;br&gt;&lt;a href=&quot;http://theme-next.iissnan.com/faqs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://theme-next.iissnan.com/faqs.html&lt;/a&gt;&lt;br&gt;添加微信打赏分享&lt;br&gt;&lt;a href=&quot;http://www.tuicool.com/articles/NVzEVz7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.tuicool.com/articles/NVzEVz7&lt;/a&gt;&lt;br&gt;添加社交登录评论功能&lt;br&gt;&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next/pull/660&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/iissnan/hexo-theme-next/pull/660&lt;/a&gt;&lt;br&gt;添加社交分享按钮&lt;br&gt;&lt;a href=&quot;http://www.jiathis.com/index2(代码加到具体主题的post.swg里面&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jiathis.com/index2(代码加到具体主题的post.swg里面&lt;/a&gt;)&lt;br&gt;或百度分享里找代码&lt;br&gt;字体大小设置&lt;br&gt;&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next/issues/400&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/iissnan/hexo-theme-next/issues/400&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近来想着搭建一个基于github的博客站点,之前在csdn的博客频繁性恶心弹窗广告，后面虽说装adblock自己是看不到了，但别人浏览还是会
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo command</title>
    <link href="http://yoursite.com/2016/03/01/hello-world/"/>
    <id>http://yoursite.com/2016/03/01/hello-world/</id>
    <published>2016-03-01T00:41:59.000Z</published>
    <updated>2016-08-07T16:16:15.226Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo generate&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
</feed>
